{"version":3,"file":"iris.cjs.production.min.js","sources":["../src/lodash.ts","../src/util.ts","../src/Key.ts","../src/peers.ts","../src/db/Actor.ts","../src/db/Message.ts","../src/global.ts","../src/db/adapters/Memory.ts","../src/db/adapters/IndexedDB.ts","../src/db/adapters/Websocket.ts","../src/db/Router.ts","../src/db/Node.ts","../src/Attribute.ts","../src/public.ts","../src/Channel.ts","../src/local.ts","../src/private.ts","../src/blockedUsers.ts","../src/group.ts","../src/notifications.ts","../src/session.ts","../src/electron.ts","../src/static.ts","../src/SignedMessage.ts","../src/index.ts"],"sourcesContent":["// @ts-nocheck\nconst _ = {\n  throttle: (func: Function, limit: number) => {\n    let inThrottle: boolean;\n    return function() {\n      const args = arguments;\n      const context = this;\n      if (!inThrottle) {\n        func.apply(context, args);\n        inThrottle = true;\n        setTimeout(() => inThrottle = false, limit);\n      }\n    };\n  },\n  debounce: (func: Function, limit: number) => {\n    let inDebounce: boolean;\n    return function() {\n      const args = arguments;\n      const context = this;\n      clearTimeout(inDebounce);\n      inDebounce = setTimeout(() => func.apply(context, args), limit);\n    };\n  },\n  sample: (arr: any[]) => arr[Math.floor(Math.random() * arr.length)],\n  sampleSize: (arr: any[], size: number) => {\n    const shuffled = arr.slice(0);\n    let i = arr.length;\n    let min = i - size;\n    let temp;\n    let index;\n    while (i-- > min) {\n      index = Math.floor((i + 1) * Math.random());\n      temp = shuffled[index];\n      shuffled[index] = shuffled[i];\n      shuffled[i] = temp;\n    }\n    return shuffled.slice(min);\n  },\n  defer: (func: Function) => setTimeout(func, 0),\n  once: (func: Function) => {\n    let called = false;\n    return function() {\n      if (called) {\n        return;\n      }\n      called = true;\n      func.apply(this, arguments);\n    };\n  },\n  omit: (obj: any, keys: string[]) => {\n    const newObj = {};\n    Object.keys(obj).forEach(key => {\n      if (!keys.includes(key)) {\n        newObj[key] = obj[key];\n      }\n    });\n    return newObj;\n  },\n  defaults: (obj: any, defaults: any) => {\n    Object.keys(defaults).forEach(key => {\n      if (obj[key] === undefined) {\n        obj[key] = defaults[key];\n      }\n    });\n    return obj;\n  },\n  pickBy: (obj: any, predicate: Function) => {\n    const newObj = {};\n    Object.keys(obj).forEach(key => {\n      if (predicate(obj[key])) {\n        newObj[key] = obj[key];\n      }\n    });\n    return newObj;\n  },\n  isEqual: (a: any, b: any) => {\n    if (a === b) {\n      return true;\n    }\n    if (a instanceof Date && b instanceof Date) {\n      return a.getTime() === b.getTime();\n    }\n    if (!a || !b || (typeof a !== 'object' && typeof b !== 'object')) {\n      return a !== a && b !== b;\n    }\n    if (a.prototype !== b.prototype) {\n      return false;\n    }\n    const keys = Object.keys(a);\n    if (keys.length !== Object.keys(b).length) {\n      return false;\n    }\n    return keys.every(k => _.isEqual(a[k], b[k]));\n  },\n  uniq: (arr: any[]) => {\n    const set = new Set(arr);\n    return Array.from(set);\n  }\n};\n\nexport default _;","// @ts-nocheck\n/* eslint no-useless-escape: \"off\", camelcase: \"off\" */\n\nimport _ from './lodash';\n\n// eslint-disable-line no-unused-vars\n\nlet isNode = false;\ntry {\n  isNode = Object.prototype.toString.call(global.process) === `[object process]`;\n} catch (e) { null; }\n\nconst userAgent = !isNode && navigator && navigator.userAgent && navigator.userAgent.toLowerCase();\nconst isElectron = (userAgent && userAgent.indexOf(' electron/') > -1);\n\nconst isMobile = !isNode && (function() {\n  if (isElectron) { return false; }\n  let check = false;\n  (function(a) {if (/(android|bb\\d+|meego).+mobile|avantgo|bada\\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(a) || /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\\-(n|u)|c55\\/|capi|ccwa|cdm\\-|cell|chtm|cldc|cmd\\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\\-s|devi|dica|dmob|do(c|p)o|ds(12|\\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\\-|_)|g1 u|g560|gene|gf\\-5|g\\-mo|go(\\.w|od)|gr(ad|un)|haie|hcit|hd\\-(m|p|t)|hei\\-|hi(pt|ta)|hp( i|ip)|hs\\-c|ht(c(\\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\\-(20|go|ma)|i230|iac( |\\-|\\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\\/)|klon|kpt |kwc\\-|kyo(c|k)|le(no|xi)|lg( g|\\/(k|l|u)|50|54|\\-[a-w])|libw|lynx|m1\\-w|m3ga|m50\\/|ma(te|ui|xo)|mc(01|21|ca)|m\\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\\-2|po(ck|rt|se)|prox|psio|pt\\-g|qa\\-a|qc(07|12|21|32|60|\\-[2-7]|i\\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\\-|oo|p\\-)|sdk\\/|se(c(\\-|0|1)|47|mc|nd|ri)|sgh\\-|shar|sie(\\-|m)|sk\\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\\-|v\\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\\-|tdg\\-|tel(i|m)|tim\\-|t\\-mo|to(pl|sh)|ts(70|m\\-|m3|m5)|tx\\-9|up(\\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\\-|your|zeto|zte\\-/i.test(a.substr(0, 4))) check = true;})(navigator.userAgent || navigator.vendor || '');\n  return check;\n})();\n\nfunction gunOnceDefined(node: any) {\n  return new Promise(resolve => {\n    node.on((val: any, _k: any, _a: any, eve: any) => {\n      if (val !== undefined) {\n        eve.off();\n        resolve(val);\n      }\n    });\n  });\n}\n\nconst animals = [\n  'canidae',\n  'felidae',\n  'cat',\n  'cattle',\n  'dog',\n  'donkey',\n  'goat',\n  'horse',\n  'pig',\n  'rabbit',\n  'aardvark',\n  'aardwolf',\n  'albatross',\n  'alligator',\n  'alpaca',\n  'amphibian',\n  'anaconda',\n  'angelfish',\n  'anglerfish',\n  'ant',\n  'anteater',\n  'antelope',\n  'antlion',\n  'ape',\n  'aphid',\n  'armadillo',\n  'asp',\n  'baboon',\n  'badger',\n  'bandicoot',\n  'barnacle',\n  'barracuda',\n  'basilisk',\n  'bass',\n  'bat',\n  'bear',\n  'beaver',\n  'bedbug',\n  'bee',\n  'beetle',\n  'bird',\n  'bison',\n  'blackbird',\n  'boa',\n  'boar',\n  'bobcat',\n  'bobolink',\n  'bonobo',\n  'booby',\n  'bovid',\n  'bug',\n  'butterfly',\n  'buzzard',\n  'camel',\n  'canid',\n  'capybara',\n  'cardinal',\n  'caribou',\n  'carp',\n  'cat',\n  'catshark',\n  'caterpillar',\n  'catfish',\n  'cattle',\n  'centipede',\n  'cephalopod',\n  'chameleon',\n  'cheetah',\n  'chickadee',\n  'chicken',\n  'chimpanzee',\n  'chinchilla',\n  'chipmunk',\n  'clam',\n  'clownfish',\n  'cobra',\n  'cockroach',\n  'cod',\n  'condor',\n  'constrictor',\n  'coral',\n  'cougar',\n  'cow',\n  'coyote',\n  'crab',\n  'crane',\n  'crawdad',\n  'crayfish',\n  'cricket',\n  'crocodile',\n  'crow',\n  'cuckoo',\n  'cicada',\n  'damselfly',\n  'deer',\n  'dingo',\n  'dinosaur',\n  'dog',\n  'dolphin',\n  'donkey',\n  'dormouse',\n  'dove',\n  'dragonfly',\n  'dragon',\n  'duck',\n  'eagle',\n  'earthworm',\n  'earwig',\n  'echidna',\n  'eel',\n  'egret',\n  'elephant',\n  'elk',\n  'emu',\n  'ermine',\n  'falcon',\n  'ferret',\n  'finch',\n  'firefly',\n  'fish',\n  'flamingo',\n  'flea',\n  'fly',\n  'flyingfish',\n  'fowl',\n  'fox',\n  'frog',\n  'gamefowl',\n  'galliform',\n  'gazelle',\n  'gecko',\n  'gerbil',\n  'gibbon',\n  'giraffe',\n  'goat',\n  'goldfish',\n  'goose',\n  'gopher',\n  'gorilla',\n  'grasshopper',\n  'grouse',\n  'guan',\n  'guanaco',\n  'guineafowl',\n  'gull',\n  'guppy',\n  'haddock',\n  'halibut',\n  'hamster',\n  'hare',\n  'harrier',\n  'hawk',\n  'hedgehog',\n  'heron',\n  'herring',\n  'hippopotamus',\n  'hookworm',\n  'hornet',\n  'horse',\n  'hoverfly',\n  'hummingbird',\n  'hyena',\n  'iguana',\n  'impala',\n  'jackal',\n  'jaguar',\n  'jay',\n  'jellyfish',\n  'junglefowl',\n  'kangaroo',\n  'kingfisher',\n  'kite',\n  'kiwi',\n  'koala',\n  'koi',\n  'krill',\n  'ladybug',\n  'lamprey',\n  'landfowl',\n  'lark',\n  'leech',\n  'lemming',\n  'lemur',\n  'leopard',\n  'leopon',\n  'limpet',\n  'lion',\n  'lizard',\n  'llama',\n  'lobster',\n  'locust',\n  'loon',\n  'louse',\n  'lungfish',\n  'lynx',\n  'macaw',\n  'mackerel',\n  'magpie',\n  'mammal',\n  'manatee',\n  'mandrill',\n  'marlin',\n  'marmoset',\n  'marmot',\n  'marsupial',\n  'marten',\n  'mastodon',\n  'meadowlark',\n  'meerkat',\n  'mink',\n  'minnow',\n  'mite',\n  'mockingbird',\n  'mole',\n  'mollusk',\n  'mongoose',\n  'monkey',\n  'moose',\n  'mosquito',\n  'moth',\n  'mouse',\n  'mule',\n  'muskox',\n  'narwhal',\n  'newt',\n  'nightingale',\n  'ocelot',\n  'octopus',\n  'opossum',\n  'orangutan',\n  'orca',\n  'ostrich',\n  'otter',\n  'owl',\n  'ox',\n  'panda',\n  'panther',\n  'parakeet',\n  'parrot',\n  'parrotfish',\n  'partridge',\n  'peacock',\n  'peafowl',\n  'pelican',\n  'penguin',\n  'perch',\n  'pheasant',\n  'pig',\n  'pigeon',\n  'pike',\n  'pinniped',\n  'piranha',\n  'planarian',\n  'platypus',\n  'pony',\n  'porcupine',\n  'porpoise',\n  'possum',\n  'prawn',\n  'primate',\n  'ptarmigan',\n  'puffin',\n  'puma',\n  'python',\n  'quail',\n  'quelea',\n  'quokka',\n  'rabbit',\n  'raccoon',\n  'rat',\n  'rattlesnake',\n  'raven',\n  'reindeer',\n  'reptile',\n  'rhinoceros',\n  'roadrunner',\n  'rodent',\n  'rook',\n  'rooster',\n  'roundworm',\n  'sailfish',\n  'salamander',\n  'salmon',\n  'sawfish',\n  'scallop',\n  'scorpion',\n  'seahorse',\n  'shark',\n  'sheep',\n  'shrew',\n  'shrimp',\n  'silkworm',\n  'silverfish',\n  'skink',\n  'skunk',\n  'sloth',\n  'slug',\n  'smelt',\n  'snail',\n  'snake',\n  'snipe',\n  'sole',\n  'sparrow',\n  'spider',\n  'spoonbill',\n  'squid',\n  'squirrel',\n  'starfish',\n  'stingray',\n  'stoat',\n  'stork',\n  'sturgeon',\n  'swallow',\n  'swan',\n  'swift',\n  'swordfish',\n  'swordtail',\n  'tahr',\n  'takin',\n  'tapir',\n  'tarantula',\n  'tarsier',\n  'termite',\n  'tern',\n  'thrush',\n  'tick',\n  'tiger',\n  'tiglon',\n  'toad',\n  'tortoise',\n  'toucan',\n  'trout',\n  'tuna',\n  'turkey',\n  'turtle',\n  'tyrannosaurus',\n  'urial',\n  'vicuna',\n  'viper',\n  'vole',\n  'vulture',\n  'wallaby',\n  'walrus',\n  'wasp',\n  'warbler',\n  'weasel',\n  'whale',\n  'whippet',\n  'whitefish',\n  'wildcat',\n  'wildebeest',\n  'wildfowl',\n  'wolf',\n  'wolverine',\n  'wombat',\n  'woodpecker',\n  'worm',\n  'wren',\n  'xerinae',\n  'yak',\n  'zebra',\n  'alpaca',\n  'cat',\n  'cattle',\n  'chicken',\n  'dog',\n  'donkey',\n  'ferret',\n  'gayal',\n  'goldfish',\n  'guppy',\n  'horse',\n  'koi',\n  'llama',\n  'sheep',\n  'yak',\n  'unicorn',\n];\n\nconst adjectives = [\n  'average',\n  'big',\n  'colossal',\n  'fat',\n  'giant',\n  'gigantic',\n  'great',\n  'huge',\n  'immense',\n  'large',\n  'little',\n  'long',\n  'mammoth',\n  'massive',\n  'miniature',\n  'petite',\n  'puny',\n  'short',\n  'small',\n  'tall',\n  'tiny',\n  'boiling',\n  'breezy',\n  'broken',\n  'bumpy',\n  'chilly',\n  'cold',\n  'cool',\n  'creepy',\n  'crooked',\n  'cuddly',\n  'curly',\n  'damaged',\n  'damp',\n  'dirty',\n  'dry',\n  'dusty',\n  'filthy',\n  'flaky',\n  'fluffy',\n  'wet',\n  'broad',\n  'chubby',\n  'crooked',\n  'curved',\n  'deep',\n  'flat',\n  'high',\n  'hollow',\n  'low',\n  'narrow',\n  'round',\n  'shallow',\n  'skinny',\n  'square',\n  'steep',\n  'straight',\n  'wide',\n  'ancient',\n  'brief',\n  'early',\n  'fast',\n  'late',\n  'long',\n  'modern',\n  'old',\n  'quick',\n  'rapid',\n  'short',\n  'slow',\n  'swift',\n  'young',\n  'abundant',\n  'empty',\n  'few',\n  'heavy',\n  'light',\n  'many',\n  'numerous',\n  'Sound',\n  'cooing',\n  'deafening',\n  'faint',\n  'harsh',\n  'hissing',\n  'hushed',\n  'husky',\n  'loud',\n  'melodic',\n  'moaning',\n  'mute',\n  'noisy',\n  'purring',\n  'quiet',\n  'raspy',\n  'resonant',\n  'screeching',\n  'shrill',\n  'silent',\n  'soft',\n  'squealing',\n  'thundering',\n  'voiceless',\n  'whispering',\n  'bitter',\n  'delicious',\n  'fresh',\n  'juicy',\n  'ripe',\n  'rotten',\n  'salty',\n  'sour',\n  'spicy',\n  'stale',\n  'sticky',\n  'strong',\n  'sweet',\n  'tasteless',\n  'tasty',\n  'thirsty',\n  'fluttering',\n  'fuzzy',\n  'greasy',\n  'grubby',\n  'hard',\n  'hot',\n  'icy',\n  'loose',\n  'melted',\n  'plastic',\n  'prickly',\n  'rainy',\n  'rough',\n  'scattered',\n  'shaggy',\n  'shaky',\n  'sharp',\n  'shivering',\n  'silky',\n  'slimy',\n  'slippery',\n  'smooth',\n  'soft',\n  'solid',\n  'steady',\n  'sticky',\n  'tender',\n  'tight',\n  'uneven',\n  'weak',\n  'wet',\n  'wooden',\n  'afraid',\n  'angry',\n  'annoyed',\n  'anxious',\n  'arrogant',\n  'ashamed',\n  'awful',\n  'bad',\n  'bewildered',\n  'bored',\n  'combative',\n  'condemned',\n  'confused',\n  'creepy',\n  'cruel',\n  'dangerous',\n  'defeated',\n  'defiant',\n  'depressed',\n  'disgusted',\n  'disturbed',\n  'eerie',\n  'embarrassed',\n  'envious',\n  'evil',\n  'fierce',\n  'foolish',\n  'frantic',\n  'frightened',\n  'grieving',\n  'helpless',\n  'homeless',\n  'hungry',\n  'hurt',\n  'ill',\n  'jealous',\n  'lonely',\n  'mysterious',\n  'naughty',\n  'nervous',\n  'obnoxious',\n  'outrageous',\n  'panicky',\n  'repulsive',\n  'scary',\n  'scornful',\n  'selfish',\n  'sore',\n  'tense',\n  'terrible',\n  'thoughtless',\n  'tired',\n  'troubled',\n  'upset',\n  'uptight',\n  'weary',\n  'wicked',\n  'worried',\n  'agreeable',\n  'amused',\n  'brave',\n  'calm',\n  'charming',\n  'cheerful',\n  'comfortable',\n  'cooperative',\n  'courageous',\n  'delightful',\n  'determined',\n  'eager',\n  'elated',\n  'enchanting',\n  'encouraging',\n  'energetic',\n  'enthusiastic',\n  'excited',\n  'exuberant',\n  'fair',\n  'faithful',\n  'fantastic',\n  'fine',\n  'friendly',\n  'funny',\n  'gentle',\n  'glorious',\n  'good',\n  'happy',\n  'healthy',\n  'helpful',\n  'hilarious',\n  'jolly',\n  'joyous',\n  'kind',\n  'lively',\n  'lovely',\n  'lucky',\n  'obedient',\n  'perfect',\n  'pleasant',\n  'proud',\n  'relieved',\n  'silly',\n  'smiling',\n  'splendid',\n  'successful',\n  'thoughtful',\n  'victorious',\n  'vivacious',\n  'witty',\n  'wonderful',\n  'zealous',\n  'zany',\n  'other',\n  'good',\n  'new',\n  'old',\n  'great',\n  'high',\n  'small',\n  'different',\n  'large',\n  'local',\n  'social',\n  'important',\n  'long',\n  'young',\n  'national',\n  'british',\n  'right',\n  'early',\n  'possible',\n  'big',\n  'little',\n  'political',\n  'able',\n  'late',\n  'general',\n  'full',\n  'far',\n  'low',\n  'public',\n  'available',\n  'bad',\n  'main',\n  'sure',\n  'clear',\n  'major',\n  'economic',\n  'only',\n  'likely',\n  'real',\n  'black',\n  'particular',\n  'international',\n  'special',\n  'difficult',\n  'certain',\n  'open',\n  'whole',\n  'white',\n  'free',\n  'short',\n  'easy',\n  'strong',\n  'european',\n  'central',\n  'similar',\n  'human',\n  'common',\n  'necessary',\n  'single',\n  'personal',\n  'hard',\n  'private',\n  'poor',\n  'financial',\n  'wide',\n  'foreign',\n  'simple',\n  'recent',\n  'concerned',\n  'american',\n  'various',\n  'close',\n  'fine',\n  'english',\n  'wrong',\n  'present',\n  'royal',\n  'natural',\n  'individual',\n  'nice',\n  'french',\n  'nihilist',\n  'solipsist',\n  'materialist',\n  'surrealist',\n  'heroic',\n  'awesome',\n  'hedonist',\n  'absurd',\n  'current',\n  'modern',\n  'labour',\n  'legal',\n  'happy',\n  'final',\n  'red',\n  'normal',\n  'serious',\n  'previous',\n  'total',\n  'prime',\n  'significant',\n  'industrial',\n  'sorry',\n  'dead',\n  'specific',\n  'appropriate',\n  'top',\n  'soviet',\n  'basic',\n  'military',\n  'original',\n  'successful',\n  'aware',\n  'hon',\n  'popular',\n  'heavy',\n  'professional',\n  'direct',\n  'dark',\n  'cold',\n  'ready',\n  'green',\n  'useful',\n  'effective',\n  'western',\n  'traditional',\n  'scottish',\n  'german',\n  'independent',\n  'deep',\n  'interesting',\n  'considerable',\n  'involved',\n  'physical',\n  'hot',\n  'existing',\n  'responsible',\n  'complete',\n  'medical',\n  'blue',\n  'extra',\n  'past',\n  'male',\n  'interested',\n  'fair',\n  'essential',\n  'beautiful',\n  'civil',\n  'primary',\n  'obvious',\n  'future',\n  'environmental',\n  'positive',\n  'senior',\n  'nuclear',\n  'annual',\n  'relevant',\n  'huge',\n  'rich',\n  'commercial',\n  'safe',\n  'regional',\n  'practical',\n  'official',\n  'separate',\n  'key',\n  'chief',\n  'regular',\n  'due',\n  'additional',\n  'active',\n  'powerful',\n  'complex',\n  'standard',\n  'impossible',\n  'light',\n  'warm',\n  'middle',\n  'fresh',\n  'sexual',\n  'front',\n  'domestic',\n  'actual',\n  'united',\n  'technical',\n  'ordinary',\n  'cheap',\n  'strange',\n  'internal',\n  'excellent',\n  'quiet',\n  'soft',\n  'potential',\n  'northern',\n  'religious',\n  'quick',\n  'very',\n  'famous',\n  'cultural',\n  'proper',\n  'broad',\n  'joint',\n  'formal',\n  'limited',\n  'conservative',\n  'lovely',\n  'usual',\n  'ltd',\n  'unable',\n  'rural',\n  'initial',\n  'substantial',\n  'bright',\n  'average',\n  'leading',\n  'reasonable',\n  'immediate',\n  'suitable',\n  'equal',\n  'detailed',\n  'working',\n  'overall',\n  'female',\n  'afraid',\n  'democratic',\n  'growing',\n  'sufficient',\n  'scientific',\n  'eastern',\n  'correct',\n  'inc',\n  'irish',\n  'expensive',\n  'educational',\n  'mental',\n  'dangerous',\n  'critical',\n  'increased',\n  'familiar',\n  'unlikely',\n  'double',\n  'perfect',\n  'slow',\n  'tiny',\n  'dry',\n  'historical',\n  'thin',\n  'daily',\n  'southern',\n  'increasing',\n  'wild',\n  'alone',\n  'urban',\n  'empty',\n  'married',\n  'narrow',\n  'liberal',\n  'supposed',\n  'upper',\n  'apparent',\n  'tall',\n  'busy',\n  'bloody',\n  'prepared',\n  'russian',\n  'moral',\n  'careful',\n  'clean',\n  'attractive',\n  'japanese',\n  'vital',\n  'thick',\n  'alternative',\n  'fast',\n  'ancient',\n  'elderly',\n  'rare',\n  'external',\n  'capable',\n  'brief',\n  'wonderful',\n  'grand',\n  'typical',\n  'entire',\n  'grey',\n  'constant',\n  'vast',\n  'surprised',\n  'ideal',\n  'terrible',\n  'academic',\n  'funny',\n  'minor',\n  'pleased',\n  'severe',\n  'ill',\n  'corporate',\n  'negative',\n  'permanent',\n  'weak',\n  'brown',\n  'fundamental',\n  'odd',\n  'crucial',\n  'inner',\n  'used',\n  'criminal',\n  'contemporary',\n  'sharp',\n  'sick',\n  'near',\n  'roman',\n  'massive',\n  'unique',\n  'secondary',\n  'parliamentary',\n  'african',\n  'unknown',\n  'subsequent',\n  'angry',\n  'alive',\n  'guilty',\n  'lucky',\n  'enormous',\n  'well',\n  'yellow',\n  'unusual',\n  'net',\n  'tough',\n  'dear',\n  'extensive',\n  'glad',\n  'remaining',\n  'agricultural',\n  'alright',\n  'healthy',\n  'italian',\n  'principal',\n  'tired',\n  'efficient',\n  'comfortable',\n  'chinese',\n  'relative',\n  'friendly',\n  'conventional',\n  'willing',\n  'sudden',\n  'proposed',\n  'voluntary',\n  'slight',\n  'valuable',\n  'dramatic',\n  'golden',\n  'temporary',\n  'federal',\n  'keen',\n  'flat',\n  'silent',\n  'indian',\n  'worried',\n  'pale',\n  'statutory',\n  'welsh',\n  'dependent',\n  'firm',\n  'wet',\n  'competitive',\n  'armed',\n  'radical',\n  'outside',\n  'acceptable',\n  'sensitive',\n  'living',\n  'pure',\n  'global',\n  'emotional',\n  'sad',\n  'secret',\n  'rapid',\n  'adequate',\n  'fixed',\n  'sweet',\n  'administrative',\n  'wooden',\n  'remarkable',\n  'comprehensive',\n  'surprising',\n  'solid',\n  'rough',\n  'mere',\n  'mass',\n  'brilliant',\n  'maximum',\n  'absolute',\n  'electronic',\n  'visual',\n  'electric',\n  'cool',\n  'spanish',\n  'literary',\n  'continuing',\n  'supreme',\n  'chemical',\n  'genuine',\n  'exciting',\n  'written',\n  'advanced',\n  'extreme',\n  'classical',\n  'fit',\n  'favourite',\n  'widespread',\n  'confident',\n  'straight',\n  'proud',\n  'numerous',\n  'opposite',\n  'distinct',\n  'mad',\n  'helpful',\n  'given',\n  'disabled',\n  'consistent',\n  'anxious',\n  'nervous',\n  'awful',\n  'stable',\n  'constitutional',\n  'satisfied',\n  'conscious',\n  'developing',\n  'strategic',\n  'holy',\n  'smooth',\n  'dominant',\n  'remote',\n  'theoretical',\n  'outstanding',\n  'pink',\n  'pretty',\n  'clinical',\n  'minimum',\n  'honest',\n  'impressive',\n  'related',\n  'residential',\n  'extraordinary',\n  'plain',\n  'visible',\n  'accurate',\n  'distant',\n  'still',\n  'greek',\n  'complicated',\n  'musical',\n  'precise',\n  'gentle',\n  'broken',\n  'live',\n  'silly',\n  'fat',\n  'tight',\n  'monetary',\n  'round',\n  'psychological',\n  'violent',\n  'unemployed',\n  'inevitable',\n  'junior',\n  'sensible',\n  'grateful',\n  'pleasant',\n  'dirty',\n  'structural',\n  'welcome',\n  'deaf',\n  'above',\n  'continuous',\n  'blind',\n  'overseas',\n  'mean',\n  'entitled',\n  'delighted',\n  'loose',\n  'occasional',\n  'evident',\n  'desperate',\n  'fellow',\n  'universal',\n  'square',\n  'steady',\n  'classic',\n  'equivalent',\n  'intellectual',\n  'victorian',\n  'level',\n  'ultimate',\n  'creative',\n  'lost',\n  'medieval',\n  'clever',\n  'linguistic',\n  'convinced',\n  'judicial',\n  'raw',\n  'sophisticated',\n  'asleep',\n  'vulnerable',\n  'illegal',\n  'outer',\n  'revolutionary',\n  'bitter',\n  'changing',\n  'australian',\n  'native',\n  'imperial',\n  'strict',\n  'wise',\n  'informal',\n  'flexible',\n  'collective',\n  'frequent',\n  'experimental',\n  'spiritual',\n  'intense',\n  'rational',\n  'generous',\n  'inadequate',\n  'prominent',\n  'logical',\n  'bare',\n  'historic',\n  'modest',\n  'dutch',\n  'acute',\n  'electrical',\n  'valid',\n  'weekly',\n  'gross',\n  'automatic',\n  'loud',\n  'reliable',\n  'mutual',\n  'liable',\n  'multiple',\n  'ruling',\n  'curious',\n  'sole',\n  'managing',\n  'pregnant',\n  'latin',\n  'nearby',\n  'exact',\n  'underlying',\n  'identical',\n  'satisfactory',\n  'marginal',\n  'distinctive',\n  'electoral',\n  'urgent',\n  'presidential',\n  'controversial',\n  'everyday',\n  'encouraging',\n  'organic',\n  'continued',\n  'expected',\n  'statistical',\n  'desirable',\n  'innocent',\n  'improved',\n  'exclusive',\n  'marked',\n  'experienced',\n  'unexpected',\n  'superb',\n  'sheer',\n  'disappointed',\n  'frightened',\n  'gastric',\n  'romantic',\n  'naked',\n  'reluctant',\n  'magnificent',\n  'convenient',\n  'established',\n  'closed',\n  'uncertain',\n  'artificial',\n  'diplomatic',\n  'tremendous',\n  'marine',\n  'mechanical',\n  'retail',\n  'institutional',\n  'mixed',\n  'required',\n  'biological',\n  'known',\n  'functional',\n  'straightforward',\n  'superior',\n  'digital',\n  'spectacular',\n  'unhappy',\n  'confused',\n  'unfair',\n  'aggressive',\n  'spare',\n  'painful',\n  'abstract',\n  'asian',\n  'associated',\n  'legislative',\n  'monthly',\n  'intelligent',\n  'hungry',\n  'explicit',\n  'nasty',\n  'just',\n  'faint',\n  'coloured',\n  'ridiculous',\n  'amazing',\n  'comparable',\n  'successive',\n  'realistic',\n  'back',\n  'decent',\n  'decentralized',\n  'bitcoin',\n  'cypherpunk',\n  'unnecessary',\n  'flying',\n  'random',\n  'influential',\n  'dull',\n  'genetic',\n  'neat',\n  'marvellous',\n  'crazy',\n  'damp',\n  'giant',\n  'secure',\n  'bottom',\n  'skilled',\n  'subtle',\n  'elegant',\n  'brave',\n  'lesser',\n  'parallel',\n  'steep',\n  'intensive',\n  'casual',\n  'tropical',\n  'lonely',\n  'partial',\n  'preliminary',\n  'concrete',\n  'alleged',\n  'assistant',\n  'vertical',\n  'upset',\n  'delicate',\n  'mild',\n  'occupational',\n  'excessive',\n  'progressive',\n  'exceptional',\n  'integrated',\n  'striking',\n  'continental',\n  'okay',\n  'harsh',\n  'combined',\n  'fierce',\n  'handsome',\n  'characteristic',\n  'chronic',\n  'compulsory',\n  'interim',\n  'objective',\n  'splendid',\n  'magic',\n  'systematic',\n  'obliged',\n  'payable',\n  'fun',\n  'horrible',\n  'primitive',\n  'fascinating',\n  'ideological',\n  'metropolitan',\n  'surrounding',\n  'estimated',\n  'peaceful',\n  'premier',\n  'operational',\n  'technological',\n  'kind',\n  'advisory',\n  'hostile',\n  'precious',\n  'accessible',\n  'determined',\n  'excited',\n  'impressed',\n  'provincial',\n  'smart',\n  'endless',\n  'isolated',\n  'drunk',\n  'geographical',\n  'like',\n  'dynamic',\n  'boring',\n  'forthcoming',\n  'unfortunate',\n  'definite',\n  'super',\n  'notable',\n  'indirect',\n  'stiff',\n  'wealthy',\n  'awkward',\n  'lively',\n  'neutral',\n  'artistic',\n  'content',\n  'mature',\n  'colonial',\n  'ambitious',\n  'evil',\n  'magnetic',\n  'verbal',\n  'legitimate',\n  'sympathetic',\n  'empirical',\n  'head',\n  'shallow',\n  'vague',\n  'naval',\n  'depressed',\n  'shared',\n  'added',\n  'shocked',\n  'mid',\n  'worthwhile',\n  'qualified',\n  'missing',\n  'blank',\n  'absent',\n  'favourable',\n  'polish',\n  'israeli',\n  'developed',\n  'profound',\n  'representative',\n  'enthusiastic',\n  'dreadful',\n  'rigid',\n  'reduced',\n  'cruel',\n  'coastal',\n  'peculiar',\n  'swiss',\n  'crude',\n  'extended',\n  'selected',\n  'eager',\n  'canadian',\n  'bold',\n  'relaxed',\n  'corresponding',\n  'running',\n  'planned',\n  'applicable',\n  'immense',\n  'allied',\n  'comparative',\n  'uncomfortable',\n  'conservation',\n  'productive',\n  'beneficial',\n  'bored',\n  'charming',\n  'minimal',\n  'mobile',\n  'turkish',\n  'orange',\n  'rear',\n  'passive',\n  'suspicious',\n  'overwhelming',\n  'fatal',\n  'resulting',\n  'symbolic',\n  'registered',\n  'neighbouring',\n  'calm',\n  'irrelevant',\n  'patient',\n  'compact',\n  'profitable',\n  'rival',\n  'loyal',\n  'moderate',\n  'distinguished',\n  'interior',\n  'noble',\n  'insufficient',\n  'eligible',\n  'mysterious',\n  'varying',\n  'managerial',\n  'molecular',\n  'olympic',\n  'linear',\n  'prospective',\n  'printed',\n  'parental',\n  'diverse',\n  'elaborate',\n  'furious',\n  'fiscal',\n  'burning',\n  'useless',\n  'semantic',\n  'embarrassed',\n  'inherent',\n  'philosophical',\n  'deliberate',\n  'awake',\n  'variable',\n  'promising',\n  'unpleasant',\n  'varied',\n  'sacred',\n  'selective',\n  'inclined',\n  'tender',\n  'hidden',\n  'worthy',\n  'intermediate',\n  'sound',\n  'protective',\n  'fortunate',\n  'slim',\n  'defensive',\n  'divine',\n  'stuck',\n  'driving',\n  'invisible',\n  'misleading',\n  'circular',\n  'mathematical',\n  'inappropriate',\n  'liquid',\n  'persistent',\n  'solar',\n  'doubtful',\n  'manual',\n  'architectural',\n  'intact',\n  'incredible',\n  'devoted',\n  'prior',\n  'tragic',\n  'respectable',\n  'optimistic',\n  'convincing',\n  'unacceptable',\n  'decisive',\n  'competent',\n  'spatial',\n  'respective',\n  'binding',\n  'relieved',\n  'nursing',\n  'toxic',\n  'select',\n  'redundant',\n  'integral',\n  'then',\n  'probable',\n  'amateur',\n  'fond',\n  'passing',\n  'specified',\n  'territorial',\n  'horizontal',\n  'inland',\n  'cognitive',\n  'regulatory',\n  'miserable',\n  'resident',\n  'polite',\n  'scared',\n  'gothic',\n  'civilian',\n  'instant',\n  'lengthy',\n  'adverse',\n  'korean',\n  'unconscious',\n  'anonymous',\n  'aesthetic',\n  'orthodox',\n  'static',\n  'unaware',\n  'costly',\n  'fantastic',\n  'foolish',\n  'fashionable',\n  'causal',\n  'compatible',\n  'wee',\n  'implicit',\n  'dual',\n  'ok',\n  'cheerful',\n  'subjective',\n  'forward',\n  'surviving',\n  'exotic',\n  'purple',\n  'cautious',\n  'visiting',\n  'aggregate',\n  'ethical',\n  'teenage',\n  'dying',\n  'disastrous',\n  'delicious',\n  'confidential',\n  'underground',\n  'thorough',\n  'grim',\n  'autonomous',\n  'atomic',\n  'frozen',\n  'colourful',\n  'injured',\n  'uniform',\n  'ashamed',\n  'glorious',\n  'wicked',\n  'coherent',\n  'rising',\n  'shy',\n  'novel',\n  'balanced',\n  'delightful',\n  'arbitrary',\n  'adjacent',\n  'worrying',\n  'weird',\n  'unchanged',\n  'rolling',\n  'evolutionary',\n  'intimate',\n  'sporting',\n  'disciplinary',\n  'formidable',\n  'lexical',\n  'noisy',\n  'gradual',\n  'accused',\n  'homeless',\n  'supporting',\n  'coming',\n  'renewed',\n  'excess',\n  'retired',\n  'rubber',\n  'chosen',\n  'outdoor',\n  'embarrassing',\n  'preferred',\n  'bizarre',\n  'appalling',\n  'agreed',\n  'imaginative',\n  'governing',\n  'accepted',\n  'vocational',\n  'mighty',\n  'puzzled',\n  'worldwide',\n  'organisational',\n  'sunny',\n  'eldest',\n  'eventual',\n  'spontaneous',\n  'vivid',\n  'rude',\n  'faithful',\n  'ministerial',\n  'innovative',\n  'controlled',\n  'conceptual',\n  'unwilling',\n  'civic',\n  'meaningful',\n  'alive',\n  'brainy',\n  'breakable',\n  'busy',\n  'careful',\n  'cautious',\n  'clever',\n  'concerned',\n  'crazy',\n  'curious',\n  'dead',\n  'different',\n  'difficult',\n  'doubtful',\n  'easy',\n  'famous',\n  'fragile',\n  'helpful',\n  'helpless',\n  'important',\n  'impossible',\n  'innocent',\n  'inquisitive',\n  'modern',\n  'open',\n  'outstanding',\n  'poor',\n  'powerful',\n  'puzzled',\n  'real',\n  'rich',\n  'shy',\n  'sleepy',\n  'super',\n  'tame',\n  'uninterested',\n  'wandering',\n  'wild',\n  'wrong',\n  'adorable',\n  'alert',\n  'average',\n  'beautiful',\n  'blonde',\n  'bloody',\n  'blushing',\n  'bright',\n  'clean',\n  'clear',\n  'cloudy',\n  'colorful',\n  'crowded',\n  'cute',\n  'dark',\n  'drab',\n  'distinct',\n  'dull',\n  'elegant',\n  'fancy',\n  'filthy',\n  'glamorous',\n  'gleaming',\n  'graceful',\n  'grotesque',\n  'homely',\n  'light',\n  'misty',\n  'motionless',\n  'muddy',\n  'plain',\n  'poised',\n  'quaint',\n  'shiny',\n  'smoggy',\n  'sparkling',\n  'spotless',\n  'stormy',\n  'strange',\n  'ugly',\n  'unsightly',\n  'unusual',\n  'bad',\n  'better',\n  'beautiful',\n  'big',\n  'black',\n  'blue',\n  'bright',\n  'clumsy',\n  'crazy',\n  'dizzy',\n  'dull',\n  'fat',\n  'frail',\n  'friendly',\n  'funny',\n  'great',\n  'green',\n  'gigantic',\n  'gorgeous',\n  'grumpy',\n  'handsome',\n  'happy',\n  'horrible',\n  'itchy',\n  'jittery',\n  'jolly',\n  'kind',\n  'long',\n  'lazy',\n  'magnificent',\n  'magenta',\n  'many',\n  'mighty',\n  'mushy',\n  'nasty',\n  'new',\n  'nice',\n  'nosy',\n  'nutty',\n  'nutritious',\n  'odd',\n  'orange',\n  'ordinary',\n  'pretty',\n  'precious',\n  'prickly',\n  'purple',\n  'quaint',\n  'quiet',\n  'quick',\n  'quickest',\n  'rainy',\n  'rare',\n  'ratty',\n  'red',\n  'roasted',\n  'robust',\n  'round',\n  'sad',\n  'scary',\n  'scrawny',\n  'short',\n  'silly',\n  'stingy',\n  'strange',\n  'striped',\n  'spotty',\n  'tart',\n  'tall',\n  'tame',\n  'tan',\n  'tender',\n  'testy',\n  'tricky',\n  'tough',\n  'ugly',\n  'ugliest',\n  'vast',\n  'watery',\n  'wasteful',\n  'wonderful',\n  'yellow',\n  'yummy',\n  'zany',\n];\n\nexport default {\n  gunOnceDefined,\n  async getHash (str: string, format = `base64`) {\n    if (!str) {\n      return undefined;\n    }\n    const encoder = new TextEncoder();\n    const data = encoder.encode(str);\n    const buffer = await crypto.subtle.digest('SHA-256', data);\n    const hash = this.arrayBufferToBase64(buffer);\n    if (format === `hex`) {\n      return this.base64ToHex(hash);\n    }\n    return hash;\n  },\n\n  capitalize(s: string) {\n    return s.charAt(0).toUpperCase() + s.slice(1)\n  },\n\n  generateName() {\n    return `${this.capitalize(_.sample(adjectives)!)} ${this.capitalize(_.sample(animals)!)}`;\n  },\n\n  base64ToHex(str: string) {\n    const raw = atob(str);\n    let result = '';\n    for (let i = 0; i < raw.length; i++) {\n      const hex = raw.charCodeAt(i).toString(16);\n      result += (hex.length === 2 ? hex : `0${ hex}`);\n    }\n    return result;\n  },\n\n  arrayBufferToBase64( buffer ) {\n    var binary = '';\n    var bytes = new Uint8Array( buffer );\n    var len = bytes.byteLength;\n    for (var i = 0; i < len; i++) {\n        binary += String.fromCharCode( bytes[ i ] );\n    }\n    return window.btoa( binary );\n  },\n\n  getCaret(el: HTMLInputElement) {\n    if (el.selectionStart) {\n      return el.selectionStart;\n    } else { // @ts-ignore\n      if (document.selection) {\n        el.focus();\n        // @ts-ignore\n        const r = document.selection.createRange();\n        if (r === null) {\n          return 0;\n        }\n        // @ts-ignore\n        const re = el.createTextRange(), rc = re.duplicate();\n        re.moveToBookmark(r.getBookmark());\n        rc.setEndPoint('EndToStart', re);\n        return rc.text.length;\n      }\n    }\n    return 0;\n  },\n\n  getUrlParameter(sParam: string, sParams: string) {\n    const sPageURL = sParams || window.location.search.substring(1);\n    const sURLVariables = sPageURL.split('&');\n    let sParameterName, i;\n\n    for (i = 0; i < sURLVariables.length; i++) {\n      sParameterName = sURLVariables[i].split('=');\n      if (sParameterName[0] === sParam) {\n        return sParameterName[1] === undefined ? true : decodeURIComponent(sParameterName[1]);\n      }\n    }\n    return;\n  },\n\n  formatTime(date: Date) {\n    // @ts-ignore\n    const t: any = date.toLocaleTimeString(undefined, {timeStyle: 'short'});\n    const s = t.split(':');\n    if (s.length === 3) { // safari tries to display seconds\n      return `${s[0] }:${ s[1] }${s[2].slice(2)}`;\n    }\n    return t;\n  },\n\n  formatDate(date: Date) {\n    const t = date.toLocaleString(undefined, {dateStyle: 'short', timeStyle: 'short'});\n    const s = t.split(':');\n    if (s.length === 3) { // safari tries to display seconds\n      return `${s[0] }:${ s[1] }${s[2].slice(2)}`;\n    }\n    return t;\n  },\n\n  getDaySeparatorText(date: Date, dateStr: string, now?: Date, nowStr?: string) {\n    if (!now) {\n      now = new Date();\n      // @ts-ignore\n      nowStr = now.toLocaleDateString({dateStyle: 'short'});\n    }\n    if (dateStr === nowStr) {\n      return 'today';\n    }\n    const dayDifference = Math.round((now - date) / (1000 * 60 * 60 * 24));\n    if (dayDifference === 0) {\n      return 'today';\n    }\n    if (dayDifference === 1) {\n      return 'yesterday';\n    }\n    if (dayDifference <= 5) {\n      return date.toLocaleDateString(undefined, {weekday: 'long'});\n    }\n    return dateStr;\n  },\n\n  getProfileLink(pub: string) {\n    return `${window.location.origin}/#/profile/${encodeURIComponent(pub)}`;\n  },\n\n  truncateString(s: string, length = 30) {\n    return s.length > length ? `${s.slice(0, length)}...` : s;\n  },\n\n  createElement(type: string, cls?: string, parent?: HTMLElement) {\n    const el = document.createElement(type);\n    if (cls) {\n      el.setAttribute('class', cls);\n    }\n    if (parent) {\n      parent.appendChild(el);\n    }\n    return el;\n  },\n\n  isNode,\n  isElectron,\n  isMobile,\n\n  throttle: (func: Function, limit: number) => {\n    let inThrottle: boolean;\n    return function() {\n      const args = arguments;\n      const context = this;\n      if (!inThrottle) {\n        func.apply(context, args);\n        inThrottle = true;\n        setTimeout(() => inThrottle = false, limit);\n      }\n    };\n  },\n  debounce: (func: Function, delay: number) => {\n    let inDebounce: boolean;\n    return function() {\n      const context = this;\n      const args = arguments;\n      clearTimeout(inDebounce);\n      inDebounce = setTimeout(() => func.apply(context, args), delay);\n    };\n  },\n  sample: (arr: any[]) => arr[Math.floor(Math.random() * arr.length)],\n  sampleSize: (arr: any[], size: number) => {\n    const shuffled = arr.slice(0);\n    let i = arr.length;\n    let min = i - size;\n    let temp;\n    let index;\n    while (i-- > min) {\n      index = Math.floor((i + 1) * Math.random());\n      temp = shuffled[index];\n      shuffled[index] = shuffled[i];\n      shuffled[i] = temp;\n    }\n    return shuffled.slice(min);\n  },\n  defer: (func: Function) => setTimeout(func, 0),\n  once: (func: Function) => {\n    let called = false;\n    return function() {\n      if (called) {\n        return;\n      }\n      called = true;\n      func.apply(this, arguments);\n    };\n  },\n  omit: (obj: any, keys: string[]) => {\n    const newObj = {};\n    Object.keys(obj).forEach(key => {\n      if (!keys.includes(key)) {\n        newObj[key] = obj[key];\n      }\n    });\n    return newObj;\n  }\n};\n","/*eslint no-useless-escape: \"off\", camelcase: \"off\" */\n\nimport util from './util';\n// eslint-disable-line no-unused-vars\n\nlet myKey: any;\n\nclass Key {\n  static async getActiveKey(datadir = `.`, keyfile = `iris.key`, fs?: any) {\n    if (myKey) {\n      return myKey;\n    }\n    if (fs) {\n      const privKeyFile = `${datadir}/${keyfile}`;\n      if (fs.existsSync(privKeyFile)) {\n        const f = fs.readFileSync(privKeyFile, `utf8`);\n        myKey = Key.fromString(f);\n      } else {\n        const newKey = await Key.generate();\n        myKey = myKey || newKey; // eslint-disable-line require-atomic-updates\n        fs.writeFileSync(privKeyFile, Key.toString(myKey));\n        fs.chmodSync(privKeyFile, 400);\n      }\n      if (!myKey) {\n        throw new Error(`loading default key failed - check ${datadir}/${keyfile}`);\n      }\n    } else {\n      const str = window.localStorage.getItem(`iris.myKey`);\n      if (str) {\n        myKey = Key.fromString(str);\n      } else {\n        const newKey = await Key.generate();\n        myKey = myKey || newKey; // eslint-disable-line require-atomic-updates\n        window.localStorage.setItem(`iris.myKey`, Key.toString(myKey));\n      }\n      if (!myKey) {\n        throw new Error(`loading default key failed - check localStorage iris.myKey`);\n      }\n    }\n    return myKey;\n  }\n\n  static getDefault(datadir = `.`, keyfile = `iris.key`) {\n    return Key.getActiveKey(datadir, keyfile);\n  }\n\n  static async getActivePub(datadir = `.`, keyfile = `iris.key`) {\n    const key = await Key.getActiveKey(datadir, keyfile);\n    return key.pub;\n  }\n\n  static setActiveKey(key: any, save = true, datadir = `.`, keyfile = `iris.key`, fs: any) {\n    myKey = key;\n    if (!save) return;\n    if (util.isNode) {\n      const privKeyFile = `${datadir}/${keyfile}`;\n      fs.writeFileSync(privKeyFile, Key.toString(myKey));\n      fs.chmodSync(privKeyFile, 400);\n    } else {\n      window.localStorage.setItem(`iris.myKey`, Key.toString(myKey));\n    }\n  }\n\n  static toString(key: any) {\n    return JSON.stringify(key);\n  }\n\n  static getId(key: any) {\n    if (!(key && key.pub)) {\n      throw new Error(`missing param`);\n    }\n    return key.pub; // hack until GUN supports lookups by keyID\n    //return util.getHash(key.pub);\n  }\n\n  static fromString(str: string) {\n    return JSON.parse(str);\n  }\n\n  // copied from Gun.SEA\n  static async generate() {\n    try {\n      var ecdhSubtle = window.crypto.subtle;\n      // First: ECDSA keys for signing/verifying...\n      var sa = await ecdhSubtle.generateKey({name: 'ECDSA', namedCurve: 'P-256'}, true, ['sign', 'verify'])\n        .then(async (keys) => {\n          // privateKey scope doesn't leak out from here!\n          //const { d: priv } = await shim.subtle.exportKey('jwk', keys.privateKey)\n          var key: any = {};\n          key.priv = (await ecdhSubtle.exportKey('jwk', keys.privateKey)).d;\n          var pub = await ecdhSubtle.exportKey('jwk', keys.publicKey);\n          //const pub = Buff.from([ x, y ].join(':')).toString('base64') // old\n          key.pub = pub.x + '.' + pub.y; // new\n          // x and y are already base64\n          // pub is UTF8 but filename/URL safe (https://www.ietf.org/rfc/rfc3986.txt)\n          // but split on a non-base64 letter.\n          return key;\n        })\n\n      // To include PGPv4 kind of keyId:\n      // const pubId = await SEA.keyid(keys.pub)\n      // Next: ECDH keys for encryption/decryption...\n\n      try {\n        var dh = await ecdhSubtle.generateKey({name: 'ECDH', namedCurve: 'P-256'}, true, ['deriveKey'])\n          .then(async (keys) => {\n            // privateKey scope doesn't leak out from here!\n            var key: any = {};\n            key.epriv = (await ecdhSubtle.exportKey('jwk', keys.privateKey)).d;\n            var pub = await ecdhSubtle.exportKey('jwk', keys.publicKey);\n            //const epub = Buff.from([ ex, ey ].join(':')).toString('base64') // old\n            key.epub = pub.x + '.' + pub.y; // new\n            // ex and ey are already base64\n            // epub is UTF8 but filename/URL safe (https://www.ietf.org/rfc/rfc3986.txt)\n            // but split on a non-base64 letter.\n            return key;\n          })\n      } catch (e) {\n        if (e == 'Error: ECDH is not a supported algorithm') {\n          console.log('Ignoring ECDH...')\n        } else {\n          throw e\n        }\n      }\n      dh = dh || {};\n\n      var r = {pub: sa.pub, priv: sa.priv, /* pubId, */ epub: dh.epub, epriv: dh.epriv}\n      return r;\n    } catch (e) {\n      console.log(e);\n      throw e;\n      return;\n    }\n  }\n\n  private static keyToJwk(key: any): JsonWebKey {\n    if (typeof key === 'string') {\n      key = { pub: key };\n    }\n    const jwk: JsonWebKey = {\n      kty: 'EC',\n      crv: 'P-256',\n      x: key.pub.split('.')[0],\n      y: key.pub.split('.')[1],\n      ext: true,\n    };\n    jwk.key_ops = key.priv ? ['sign'] : ['verify'];\n    if (key.priv) {\n      jwk.d = key.priv\n    }\n    return jwk;\n  }\n\n  static async sign(data: any, pair: any, cb?: Function, opt: any = {}) {\n    if(undefined === data){ throw '`undefined` not allowed.' }\n    if (typeof data === 'object') {\n      data = JSON.stringify(data);\n    }\n    var jwk = Key.keyToJwk(pair);\n    console.log('signing with jwk', jwk);\n    var hash = await util.getHash(data);\n    var sig = await window.crypto.subtle.importKey('jwk', jwk, {name: 'ECDSA', namedCurve: 'P-256'}, false, ['sign'])\n    .then((key) =>\n      window.crypto.subtle.sign({name: 'ECDSA', hash: {name: 'SHA-256'}}, key, new Uint8Array(hash as any))\n    ) // privateKey scope doesn't leak out from here!\n    var r: any = {m: JSON.stringify(data), s: Buffer.from(sig).toString(opt.encode || 'base64')}\n    if(!opt.raw){ r = 'aSEA' + JSON.stringify(r) }\n\n    if(cb){ try{ cb(r) }catch(e){console.log(e)} }\n    return r;\n  }\n\n  static async verify(data: any, pair: any, cb?: Function, opt: any = {}) {\n    try {\n      if (typeof data === 'string') {\n        console.log('verifying string', data.slice(4));\n        data = JSON.parse(data.slice(4));\n      }\n      var pub = pair.pub || pair;\n      var jwk = Key.keyToJwk(pub);\n      var key = await crypto.subtle.importKey('jwk', jwk, {name: 'ECDSA', namedCurve: 'P-256'}, false, ['verify']);\n      var hash: any = await util.getHash(data.m);\n      var buf, sig, isValid;\n      buf = Buffer.from(data.s, opt.encode || 'base64'); // NEW DEFAULT!\n      sig = new Uint8Array(buf);\n      isValid = await crypto.subtle.verify({name: 'ECDSA', hash: {name: 'SHA-256'}}, key, sig, new Uint8Array(hash));\n      var r = isValid? JSON.parse(data.m) : undefined;\n\n      if(cb){ try{ cb(r) }catch(e){console.log(e)} }\n      return r;\n    } catch (e) {\n      console.log(e);\n      return undefined;\n    }\n  }\n\n  static async secret(_pub: any, _pair: any) {\n    return 'asdf';\n    /*\n    // ecdh secret\n\n    pub = pub.split('.');\n    const x = pub[0], y = pub[1];\n    const jwk: any = {kty: \"EC\", crv: \"P-256\", x: x, y: y, ext: true};\n    jwk.key_ops = pair.epriv ? ['sign'] : ['verify'];\n    if(pair.epriv){ jwk.d = pair.epriv; }\n\n    try {\n      var secret = await window.crypto.subtle.importKey('jwk', jwk, {name: 'ECDH', namedCurve: 'P-256'}, false, ['deriveKey'])\n        .then((key) => window.crypto.subtle.deriveKey({name: 'ECDH', public: key}, pair.priv, {name: 'AES-GCM', length: 256}, false, ['encrypt', 'decrypt']))\n      var r = await window.crypto.subtle.exportKey('raw', secret);\n      return r;\n    } catch(e) {\n      throw(e);\n    }\n\n     */\n  }\n\n  static async encrypt(_data: any, _pair: any, _cb?: Function, _opt = {}) {\n    /*\n    try {\n      opt = opt || {};\n      var key = (pair||opt).epriv || pair;\n      if(u === data){ throw '`undefined` not allowed.' }\n      if(!key){\n        if(!SEA.I){ throw 'No encryption key.' }\n        pair = await SEA.I(null, {what: data, how: 'encrypt', why: opt.why});\n        key = pair.epriv || pair;\n      }\n      var msg = (typeof data == 'string')? data : await shim.stringify(data);\n      var rand = {s: shim.random(9), iv: shim.random(15)}; // consider making this 9 and 15 or 18 or 12 to reduce == padding.\n      var ct = await aeskey(key, rand.s, opt).then((aes) => (shim.subtle).encrypt({ // Keeping the AES key scope as private as possible...\n        name: opt.name || 'AES-GCM', iv: new Uint8Array(rand.iv)\n      }, aes, new shim.TextEncoder().encode(msg)));\n      var r = {\n        ct: shim.Buffer.from(ct, 'binary').toString(opt.encode || 'base64'),\n        iv: rand.iv.toString(opt.encode || 'base64'),\n        s: rand.s.toString(opt.encode || 'base64')\n      }\n      if(!opt.raw){ r = 'SEA' + await shim.stringify(r) }\n\n      if(cb){ try{ cb(r) }catch(e){console.log(e)} }\n      return r;\n    } catch(e) {\n      console.log(e);\n      SEA.err = e;\n      if(SEA.throw){ throw e }\n      if(cb){ cb() }\n      return;\n    }\n    */\n    return 'asdf';\n  }\n\n  static async decrypt(_data: any, _pair: any, _cb?: Function, _opt = {}) {\n    return 'asdf';\n    /*\n    try {\n      opt = opt || {};\n      var key = (pair||opt).epriv || pair;\n      if(!key){\n        if(!SEA.I){ throw 'No decryption key.' }\n        pair = await SEA.I(null, {what: data, how: 'decrypt', why: opt.why});\n        key = pair.epriv || pair;\n      }\n      var json = await S.parse(data);\n      var buf, bufiv, bufct; try{\n        buf = shim.Buffer.from(json.s, opt.encode || 'base64');\n        bufiv = shim.Buffer.from(json.iv, opt.encode || 'base64');\n        bufct = shim.Buffer.from(json.ct, opt.encode || 'base64');\n        var ct = await aeskey(key, buf, opt).then((aes) => (shim.subtle).decrypt({  // Keeping aesKey scope as private as possible...\n          name: opt.name || 'AES-GCM', iv: new Uint8Array(bufiv), tagLength: 128\n        }, aes, new Uint8Array(bufct)));\n      }catch(e){\n        if('utf8' === opt.encode){ throw \"Could not decrypt\" }\n        if(SEA.opt.fallback){\n          opt.encode = 'utf8';\n          return await SEA.decrypt(data, pair, cb, opt);\n        }\n      }\n      var r = await S.parse(new shim.TextDecoder('utf8').decode(ct));\n      if(cb){ try{ cb(r) }catch(e){console.log(e)} }\n      return r;\n    } catch(e) {\n      console.log(e);\n      SEA.err = e;\n      if(SEA.throw){ throw e }\n      if(cb){ cb() }\n      return;\n    }\n    */\n  }\n}\n\nexport default Key;\n","import session from './session';\nimport _ from './lodash';\nimport util from './util';\nimport publicState from './global';\nimport Key from './Key';\n\nconst ELECTRON_GUN_URL = 'http://localhost:8767/gun';\nlet maxConnectedPeers = 1;\n\ntype Peer = {\n  url?: string;\n  enabled?: boolean;\n  from?: string;\n  visibility?: string;\n}\n\ntype Peers = {\n  [key: string]: Peer\n}\n\nconst DEFAULT_PEERS: Peers = {\n  'wss://gun-rs.iris.to/gun': {},\n//  'wss://gun-us.herokuapp.com/gun': {},\n};\n\nif (self.window) {\n  const loc = window.location;\n  const host = loc.host;\n  const is_localhost_but_not_dev = host.startsWith('localhost') && host !== 'localhost:8080';\n  if (loc.hostname.endsWith('herokuapp.com') || is_localhost_but_not_dev) {\n    Object.keys(DEFAULT_PEERS).forEach(url => DEFAULT_PEERS[url].enabled = false);\n    DEFAULT_PEERS[`${loc.origin}/gun`] = {enabled: true};\n  }\n}\n\n/**\n * Networking and peer management utilities\n */\nexport default {\n  known: {} as Peers,\n\n  /** */\n  async add(peer: Peer) {\n    if (peer.from) {\n      Object.keys(this.known).forEach(k => {\n        if (this.known[k].from === peer.from) { // remove previous peer url from the same user\n          delete this.known[k];\n        }\n      });\n    }\n    const url = peer.url || '';\n    this.known[url] = this.known[url] || _.omit(peer, ['url']);\n    if (peer.visibility === 'public') {\n      // rolling some crypto operations to obfuscate actual url in case we want to remove it\n      let secret = await Key.secret(session.getKey().epub, session.getKey()) || '';\n      let encryptedUrl = await Key.encrypt(peer.url, secret);\n      let encryptedUrlHash = await util.getHash(encryptedUrl);\n      publicState().user().get('peers').get(encryptedUrlHash).put({url: peer.url, lastSeen: new Date().toISOString()});\n    }\n    if (peer.enabled !== false) {\n      peer.url && this.connect(peer.url); // this calls savePeers()\n    } else {\n      this.save();\n    }\n  },\n\n  /** */\n  remove(url: string) {\n    delete this.known[url];\n    this.save();\n  },\n\n  /** */\n  disconnect(peerFromGun: any) {\n    publicState().on('bye', peerFromGun);\n    peerFromGun.url = '';\n  },\n\n  save() {\n    // TODO store them in iris.local() instead of localStorage\n    localStorage.setItem('gunPeers', JSON.stringify(this.known));\n  },\n\n  getSaved() {\n    let p: any = localStorage.getItem('gunPeers');\n    if (p && p !== 'undefined') {\n      p = JSON.parse(p);\n    } else {\n      p = DEFAULT_PEERS;\n    }\n    if (util.isElectron) {\n      p[ELECTRON_GUN_URL] = {};\n    }\n    Object.keys(p).forEach(k => _.defaults(p[k], {enabled: true}));\n    return p;\n  },\n\n  /** */\n  reset() {\n    localStorage.setItem('gunPeers', '');\n    this.known = this.getSaved();\n  },\n\n  /** */\n  connect(url: string) {\n    if (!url) {\n      return;\n    }\n    if (this.isMixedContent(url)) { return; }\n    if (this.known[url]) {\n      this.known[url].enabled = true;\n      publicState().opt({peers: [url]});\n      this.save();\n    } else {\n      this.add({url});\n    }\n  },\n\n  /** */\n  disable(url: string, peerFromGun: any) {\n    this.known[url].enabled = false;\n    if (peerFromGun) {\n      this.disconnect(peerFromGun);\n    }\n    this.save();\n  },\n\n  isMixedContent(url: string) {\n    return window.location.protocol === 'https:' && (url.indexOf('http:') === 0);\n  },\n\n  random() {\n    const connectToLocalElectron = util.isElectron && this.known[ELECTRON_GUN_URL] && this.known[ELECTRON_GUN_URL].enabled !== false;\n    const sampleSize = connectToLocalElectron ? Math.max(maxConnectedPeers - 1, 1) : maxConnectedPeers;\n    const sample = _.sampleSize(\n      Object.keys(\n        _.pickBy(this.known, (peer: any, url: string) => {\n          return url && !this.isMixedContent(url) && peer.enabled && !(util.isElectron && url === ELECTRON_GUN_URL);\n        })\n      ), sampleSize\n    );\n    if (sample && connectToLocalElectron) {\n      sample.push(ELECTRON_GUN_URL);\n    }\n    return sample;\n  },\n\n  checkGunPeerCount() {\n    return;\n    let peersFromGun = publicState().back('opt.peers');\n    let connectedPeers = Object.values(peersFromGun).filter((peer: any) => {\n      if (peer && peer.wire && peer.wire.constructor.name !== 'WebSocket') {\n        console.log('WebRTC peer', peer);\n      }\n      return peer && peer.wire && peer.wire.readyState === 1  && peer.wire.bufferedAmount === 0 && peer.wire.constructor.name === 'WebSocket';\n    });\n    if (connectedPeers.length < maxConnectedPeers) {\n      let unconnectedPeers = Object.keys(this.known).filter(url => {\n        let addedToGun = Object.values(peersFromGun).map((peer:any) => peer.url).indexOf(url) > -1;\n        let enabled = this.known[url].enabled;\n        const mixedContent = (window.location.protocol === 'https:' && (url.indexOf('http:') === 0));\n        return !mixedContent && enabled && !addedToGun;\n      });\n      if (unconnectedPeers.length) {\n        const sample = String(_.sample(unconnectedPeers));\n        this.connect(sample);\n      }\n    }\n    if (connectedPeers.length > maxConnectedPeers) {\n      this.disconnect(_.sample(connectedPeers));\n    }\n  },\n\n  init() {\n    this.known = this.getSaved();\n    /* use the default value of 1 for now because of memory issue\n    local().get('settings').get('maxConnectedPeers').on(n => {\n      if (n !== undefined) maxConnectedPeers = n;\n    });\n     */\n    setInterval(() => this.checkGunPeerCount(), 1000);\n  }\n};\n","import {Message} from './Message';\n\nexport function generateUuid() {\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {\n        const r = Math.random()*16|0, v = c == 'x' ? r : (r&0x3|0x8);\n        return v.toString(16);\n    });\n}\n\nexport class Actor {\n    id: string;\n\n    handle(_message: Message) {\n        throw new Error('not implemented');\n    }\n\n    // so we can support a similar api as Channels\n    postMessage(message: Message) {\n        this.handle(message);\n    }\n\n    constructor(id = generateUuid()) {\n        this.id = id;\n    }\n}","import {Actor} from './Actor';\nimport {Children} from \"./Node\";\n\nexport class Message {\n    // When Messages are sent over BroadcastChannel, class name is lost.\n    static fromObject(obj: any): Message {\n        if (obj.type === 'get') {\n            return Get.fromObject(obj);\n        } else if (obj.type === 'put') {\n            return Put.fromObject(obj);\n        } else {\n            throw new Error('not implemented');\n        }\n    }\n\n    static deserialize(str: string, from: Actor): Message {\n        const obj = JSON.parse(str);\n        if (obj.get) {\n            return Get.deserialize(obj, str, from);\n        } else if (obj.put) {\n            return Put.deserialize(obj, str, from);\n        } else if (obj.dam && obj.dam === \"hi\") {\n            return Hi.deserialize(obj);\n        } else {\n            throw new Error('unknown message type');\n        }\n    }\n\n    serialize(): string {\n        throw new Error('not implemented');\n    }\n}\n\nfunction generateMsgId(): string {\n    return Math.random().toString(36).slice(2, 10);\n}\n\nexport class Get implements Message {\n    type: string = 'get';\n    id: string;\n    nodeId: string;\n    from: Actor;\n    recipients?: string[];\n    childKey?: string;\n    jsonStr?: string;\n    checksum?: string;\n\n    serialize(): string {\n        if (this.jsonStr) {\n            return this.jsonStr;\n        }\n\n        // TODO remove \"global/\", replace /^user\\// with ~\n        let nodeId = this.nodeId.replace(/^global\\//, '').replace(/^user\\//, '~');\n        const obj: any = {\n            \"#\": this.id,\n            get: {\n                \"#\": nodeId,\n                \".\": this.childKey\n            },\n        };\n\n        if (this.childKey) {\n            obj.get['.'] = this.childKey;\n        }\n        this.jsonStr = JSON.stringify(obj);\n        return this.jsonStr;\n    }\n\n    static deserialize(obj: any, jsonStr: string, from: Actor): Get {\n        const id = obj['#'];\n        let nodeId = obj.get['#']; // TODO add \"global/\" prefix, replace /^~/ with \"user/\"\n        if (nodeId.startsWith('~')) {\n            nodeId = 'user/' + nodeId.slice(1);\n        }\n        nodeId = 'global/' + nodeId;\n        const childKey = obj.get['.'];\n        return new Get(id, nodeId, from, undefined, childKey, jsonStr);\n    }\n\n    static fromObject(obj: any): Get {\n        return new Get(obj.id, obj.nodeId, obj.from, obj.recipients, obj.childKey, obj.jsonStr, obj.checksum);\n    }\n\n    static new(nodeId: string, from: Actor, recipients?: string[], childKey?: string, jsonStr?: string, checksum?: string): Get {\n        const id = generateMsgId();\n        return new Get(id, nodeId, from, recipients, childKey, jsonStr, checksum);\n    }\n\n    constructor(id: string, nodeId: string, from: Actor, recipients?: string[], childKey?: string, jsonStr?: string, checksum?: string) {\n        this.id = id;\n        this.from = from;\n        this.nodeId = nodeId;\n        this.recipients = recipients;\n        this.childKey = childKey;\n        this.jsonStr = jsonStr;\n        this.checksum = checksum;\n    }\n}\n\nexport type UpdatedNodes = {\n    [key: string]: Children;\n};\n\nexport class Put implements Message {\n    type: string = 'put';\n    id: string;\n    from: Actor;\n    updatedNodes: UpdatedNodes;\n    inResponseTo?: string;\n    recipients?: string[];\n    jsonStr?: string;\n    checksum?: string;\n\n    serialize(): string {\n        const obj = {\n            \"#\" : this.id,\n            \"put\": {} as any\n        };\n\n        // iterate over this.updatedNodes\n        for (const [nodeId, children] of Object.entries(this.updatedNodes)) {\n            let myNodeId = nodeId.replace(/^global\\//, '').replace(/^user\\//, '~');\n            const node: any = obj.put[myNodeId] = {};\n            for (const [childKey, childValue] of Object.entries(children)) {\n                if (!childValue) {\n                    continue;\n                }\n                const data = childValue;\n                node[childKey] = data.value;\n                node[\"_\"] = node[\"_\"] || {};\n                node[\"_\"][\">\"] = node[\"_\"][\">\"] || {};\n                node[\"_\"][\">\"][childKey] = data.updatedAt;\n            }\n        }\n        return JSON.stringify(obj);\n    }\n\n    static deserialize(obj: any, jsonStr: string, from: Actor): Put {\n        const id = obj['#'];\n        const updatedNodes: UpdatedNodes = {};\n        type SerializedChildren = {\n            [key: string]: any;\n        }\n        for (const [nodeId, c] of Object.entries(obj.put)) {\n            const children = c as SerializedChildren;\n            const node: any = {};\n            for (const [childKey, childValue] of Object.entries(children)) {\n                if (childKey === '_') {\n                    continue;\n                }\n                const updatedAt = children['_']['>'][childKey];\n                node[childKey] = {\n                    value: childValue,\n                    updatedAt,\n                };\n            }\n            const myNodeId = 'global/' + nodeId.replace(/^~/, 'user/');\n            updatedNodes[myNodeId] = node;\n        }\n        return new Put(id, updatedNodes, from, undefined, undefined, jsonStr);\n    }\n\n    static fromObject(obj: any): Put {\n        return new Put(obj.id, obj.updatedNodes, obj.from, obj.inResponseTo, obj.recipients, obj.jsonStr, obj.checksum);\n    }\n\n    static new(updatedNodes: UpdatedNodes, from: Actor, inResponseTo?: string, recipients?: string[], jsonStr?: string, checksum?: string): Put {\n        const id = generateMsgId();\n        return new Put(id, updatedNodes, from, inResponseTo, recipients, jsonStr, checksum);\n    }\n\n    static newFromKv(key: string, children: Children, from:Actor) {\n        const updatedNodes: UpdatedNodes = {};\n        updatedNodes[key] = children;\n        return Put.new(updatedNodes, from);\n    }\n\n    constructor(id: string, updatedNodes: UpdatedNodes, from: Actor, inResponseTo?: string, recipients?: string[], jsonStr?: string, checksum?: string) {\n        this.id = id;\n        this.from = from;\n        this.updatedNodes = updatedNodes;\n        this.inResponseTo = inResponseTo;\n        this.recipients = recipients;\n        this.jsonStr = jsonStr;\n        this.checksum = checksum;\n    }\n}\n\nexport class Hi implements Message {\n    type: string = 'hi';\n    peerId: string;\n    jsonStr?: string;\n\n    //{\"#\":\"aHHO9Srurq9nh6Q9\",\"dam\":\"hi\"}\n\n\n    serialize(): string {\n        if (this.jsonStr) {\n            return this.jsonStr;\n        }\n\n        const obj: any = {\n            dam: \"hi\",\n            \"#\": this.peerId,\n        };\n\n        this.jsonStr = JSON.stringify(obj);\n        return this.jsonStr;\n    }\n\n    static deserialize(obj: any): Hi {\n        const peerId = obj['#'];\n        return new Hi(peerId);\n    }\n\n    constructor(peerId: string, jsonStr?: string) {\n        this.peerId = peerId;\n        this.jsonStr = jsonStr;\n    }\n}\n\nconst parseGet = (get: any, from: Actor): Get => {\n    return new Get(get.id, get.nodeId, from, get.recipients, get.childKey, get.jsonStr, get.checksum);\n}\n\nconst parsePut = (put: any, from: Actor): Put => {\n    return new Put(put.id, put.updatedNodes, from, put.inResponseTo, put.recipients, put.jsonStr, put.checksum);\n}\n\nexport function messageFromJsonString(jsonStr: string, from: Actor): Message {\n    const obj = JSON.parse(jsonStr);\n    if (obj.get) {\n        return parseGet(obj.get, from);\n    } else if (obj.put) {\n        return parsePut(obj.put, from);\n    } else {\n        throw new Error('Unknown message type');\n    }\n}","import peers from \"./peers\";\nimport Node from \"./db/Node\";\n\nlet globalState: any;\n\nexport default function(opts: any = {}) {\n  if (!globalState) {\n    peers.init();\n    const webSocketPeers = (opts.peers || peers.random());\n    console.log('webSocketPeers', webSocketPeers);\n    const myOpts = Object.assign({ webSocketPeers, localStorage: false, retry:Infinity }, opts);\n    if (opts.peers) {\n      console.log('adding peers', opts.peers);\n      opts.peers.forEach((url: string) => peers.add({url}));\n    }\n    globalState = new Node('global', myOpts);\n  }\n  return globalState;\n}","import {Put, Get, Message} from '../Message'\nimport { Actor } from '../Actor';\nimport QuickLRU from 'quick-lru';\nimport {Children} from \"../Node\";\n//import {NodeData} from \"../Node\";\n// import * as Comlink from \"comlink\";\nimport _ from '../../lodash';\n\nexport default class Memory extends Actor {\n    config = {};\n    store: QuickLRU<string, Children> = new QuickLRU({ maxSize: 10000 });\n\n    constructor(config: any = {}) {\n        super();\n        this.config = config;\n    }\n\n    handle(message: Message) {\n        if (message instanceof Put) {\n            this.handlePut(message);\n        } else if (message instanceof Get) {\n            this.handleGet(message);\n        } else {\n            console.log('Memory got unknown message', message);\n        }\n    }\n\n    handleGet(message: Get) {\n        if (!message.from) {\n            console.log('no from in get message');\n            return;\n        }\n        let children = this.store.get(message.nodeId);\n        if (children) {\n            //console.log('have', message.nodeId, children);\n            const putMessage = Put.newFromKv(message.nodeId, children, this);\n            putMessage.inResponseTo = message.id;\n            message.from && message.from.postMessage(putMessage);\n        } else {\n            //console.log('dont have', message.nodeId);\n        }\n    }\n\n    mergeAndSave(nodeName: string, children: Children) {\n        const existing = this.store.get(nodeName);\n\n        // TODO check updatedAt timestamp\n        if (existing === undefined) {\n            this.store.set(nodeName, children);\n        } else {\n            for (const [key, value] of Object.entries(children)) {\n                if (existing[key] && existing[key].updatedAt >= value.updatedAt) {\n                    continue;\n                }\n                existing[key] = value;\n            }\n            this.store.set(nodeName, existing);\n        }\n    }\n\n    async handlePut(put: Put) {\n        for (const [nodeName, children] of Object.entries(put.updatedNodes)) {\n            if (!children) {\n                console.log('deleting', nodeName);\n                this.store.delete(nodeName);\n                continue;\n            }\n            this.mergeAndSave(nodeName, children);\n        }\n    }\n}\n\n/*\nlet actor;\nglobal.onconnect = () => {\n    if (actor) {\n        console.log ('worker already exists');\n    } else {\n        console.log('starting worker');\n        actor = actor || new IndexedDB();\n    }\n}\n */\n\n// self.onconnect = (e) => Comlink.expose(actor, e.ports[0]);","import {Put, Get, Message} from '../Message'\nimport { Actor } from '../Actor';\nimport _ from \"../../lodash\";\nimport Dexie from 'dexie';\nimport {Children, NodeData} from \"../Node\";\n// import * as Comlink from \"comlink\";\n\n// TODO: add LRU or other eviction policy, clean up least important data when db gets too big\nclass MyDexie extends Dexie {\n    nodes: Dexie.Table<NodeData, string>;\n    constructor(dbName: string) {\n        super(dbName);\n        this.version(1).stores({\n            nodes: \", value, updatedAt\"\n        });\n        this.nodes = this.table(\"nodes\");\n    }\n}\n\nexport default class IndexedDB extends Actor {\n    config = {};\n    notStored = new Set();\n    putQueue: any = {};\n    getQueue: any = {};\n    i = 0;\n    queue = 0;\n    db: MyDexie;\n\n    constructor(config: any = {}) {\n        super();\n        this.config = config;\n        const dbName = (config.dbName || 'iris');\n        this.db = new MyDexie(dbName);\n        this.db.open().catch((err) => {\n            console.error(err.stack || err);\n        });\n    }\n\n    put(nodeId: string, value: any) {\n        // add puts to a queue and dexie bulk write them once per 500ms\n        this.putQueue[nodeId] = value;\n        this.throttledPut();\n    }\n\n    throttledPut = _.throttle(() => {\n        const keys = Object.keys(this.putQueue);\n        const values = keys.map(key => {\n            this.notStored.delete(key);\n            return this.putQueue[key];\n        });\n        this.db.nodes.bulkPut(values, keys).catch((err) => {\n            console.error(err);\n        });\n        this.putQueue = {};\n    }, 500);\n\n    get(path: string, callback: Function) {\n        this.getQueue[path] = this.getQueue[path] || [];\n        this.getQueue[path].push(callback);\n        this.throttledGet();\n    }\n\n    throttledGet = _.throttle(() => {\n        // clone this.getQueue and clear it\n        const queue = this.getQueue;\n        const keys = Object.keys(queue);\n        this.db.nodes.bulkGet(keys).then((values: (any | undefined)[]) => {\n            for (let i = 0; i < keys.length; i++) {\n                const key = keys[i];\n                const value = values[i];\n                const callbacks = queue[key];\n                // console.log('have', key, value);\n                for (const callback of callbacks) {\n                    callback(value);\n                }\n            }\n        });\n        this.getQueue = {};\n    }, 100);\n\n    handle(message: Message) {\n        if (message instanceof Put) {\n            this.handlePut(message);\n        } else if (message instanceof Get) {\n            this.handleGet(message);\n        } else {\n            console.log('worker got unknown message', message);\n        }\n    }\n\n    handleGet(message: Get) {\n        if (this.notStored.has(message.nodeId)) {\n            // TODO message implying that the key is not stored\n            return;\n        }\n        this.get(message.nodeId, (children: any) => {\n            // TODO: this takes a long time to return\n            if (children === undefined) {\n                this.notStored.add(message.nodeId);\n                // TODO message implying that the key is not stored\n            } else {\n                const putMessage = Put.newFromKv(message.nodeId, children, this);\n                putMessage.inResponseTo = message.id;\n                message.from && message.from.postMessage(putMessage);\n            }\n        });\n    }\n\n    mergeAndSave(path: string, children: Children) {\n        this.get(path, (existing: any) => {\n            // TODO check updatedAt timestamp\n            if (existing === undefined) {\n                this.put(path, children);\n            } else {\n                for (const [key, value] of Object.entries(children)) {\n                    if (existing[key] && existing[key].updatedAt >= value.updatedAt) {\n                        continue;\n                    }\n                    existing[key] = value;\n                }\n                this.put(path, existing);\n            }\n        });\n    }\n\n    savePath(path: string, value: any) {\n        if (value === undefined) {\n            this.db.nodes.delete(path);\n            this.notStored.add(path);\n        } else {\n            this.notStored.delete(path);\n            this.mergeAndSave(path, value);\n        }\n    }\n\n    async handlePut(put: Put) {\n        for (const [nodeName, children] of Object.entries(put.updatedNodes)) {\n            if (!children) {\n                console.log('deleting', nodeName);\n                continue;\n            }\n            this.mergeAndSave(nodeName, children);\n        }\n    }\n}\n\n/*\nlet actor;\nglobal.onconnect = () => {\n    if (actor) {\n        console.log ('worker already exists');\n    } else {\n        console.log('starting worker');\n        actor = actor || new IndexedDB();\n    }\n}\n */\n\n// self.onconnect = (e) => Comlink.expose(actor, e.ports[0]);","import {Get, Message, Put} from \"../Message\";\nimport {Actor} from \"../Actor\";\n//@ts-ignore\n\nexport default class Websocket extends Actor {\n    ws: WebSocket;\n    router: Actor;\n    sendQueue: string[] = [];\n\n    constructor(url: string, router: Actor) {\n        super('websocket:' + url);\n        console.log('Websocket', url);\n        this.router = router;\n        this.ws = new WebSocket(url.replace('http', 'ws'));\n        this.ws.onopen = () => {\n            //this.ws.send(new Hi(this.router.peerId).serialize());\n            console.log(`Connected to ${url}`);\n            this.sendQueue.forEach((message) => this.ws.send(message));\n            this.sendQueue = [];\n        }\n        this.ws.onmessage = (event) => {\n            try {\n                const message = Message.deserialize(event.data, this);\n                this.router.postMessage(message);\n            } catch (e) {\n                console.log('Failed to deserialize message', event.data, e);\n            }\n        }\n        this.ws.onclose = () => {\n            console.log(`Disconnected from ${url}`);\n        }\n        this.ws.onerror = () => {\n            console.log(`Error on ${url}`);\n        }\n    }\n\n    handle(message: Message): void {\n        if (message instanceof Get || message instanceof Put) {\n            if (message.from === this) {\n                return;\n            }\n            if (this.ws.readyState === WebSocket.OPEN) {\n                this.ws.send(message.serialize());\n            } else if (this.ws.readyState === WebSocket.CONNECTING) {\n                this.sendQueue.push(message.serialize());\n            }\n        }\n    }\n}\n\n\n","import {Actor} from \"./Actor\";\nimport Memory from \"./adapters/Memory\";\nimport IndexedDB from \"./adapters/IndexedDB\";\nimport Websocket from \"./adapters/Websocket\";\nimport {Put, Get, Message} from \"./Message\";\n// import * as Comlink from \"comlink\";\n\n/*\nclass SeenGetMessage {\n    constructor(id, from, lastReplyChecksum) {\n        this.id = id;\n        this.from = from;\n        this.lastReplyChecksum = lastReplyChecksum;\n    }\n}\n*/\n\nexport default class Router extends Actor {\n    storageAdapters: Set<Actor> = new Set();\n    networkAdapters: Set<Actor> = new Set();\n    serverPeers: Set<Actor> = new Set();\n    seenMessages: Set<string> = new Set();\n    seenGetMessages: Map<string, Message> = new Map();\n    subscribersByTopic: Map<string, Set<Actor>> = new Map();\n    msgCounter = 0;\n    peerId: string;\n\n    constructor(config: any = {}) {\n        super('router');\n        // default random id\n        this.peerId = config.peerId || Math.random().toString(36).substring(2, 15) + Math.random().toString(36).substring(2, 15);\n        this.storageAdapters.add(new Memory(config));\n        this.storageAdapters.add(new IndexedDB(config));\n        console.log('config', config);\n        if (config.peers) {\n            for (const peer of config.peers) {\n                if (peer) {\n                    this.serverPeers.add(new Websocket(peer, this));\n                }\n            }\n        }\n    }\n\n    handle(message: Message) {\n        //console.log('router received', message);\n        if (message instanceof Put || message instanceof Get) {\n            if (this.seenMessages.has(message.id)) {\n                return;\n            }\n            this.seenMessages.add(message.id);\n            if (message instanceof Put) {\n                this.handlePut(message);\n            } else if (message instanceof Get) {\n                this.handleGet(message);\n            }\n        }\n    }\n\n    handlePut(put: Put) {\n        const sendTo: Set<Actor> = new Set();\n        Object.keys(put.updatedNodes).forEach(path => {\n            // topic is first 3 nodes of path\n            const topic = path.split('/').slice(0, 3).join('/');\n            const subscribers = this.subscribersByTopic.get(topic);\n            // send to storage adapters\n            //console.log('put subscribers', subscribers);\n            for (const storageAdapter of this.storageAdapters) {\n                if (put.from !== storageAdapter) {\n                    sendTo.add(storageAdapter);\n                }\n            }\n\n            for (const peer of this.serverPeers) {\n                if (put.from !== peer) {\n                    sendTo.add(peer);\n                }\n            }\n\n            if (subscribers) {\n                for (const subscriber of subscribers) {\n                    if (subscriber !== put.from) {\n                        sendTo.add(subscriber);\n                    }\n                }\n            }\n        });\n        for (const actor of sendTo) {\n            actor.postMessage(put);\n        }\n    }\n\n    opt(opts: any) {\n        if (opts.peers) {\n            for (const peer of opts.peers) {\n                if (peer) {\n                    this.serverPeers.add(new Websocket(peer, this));\n                }\n            }\n        }\n    }\n\n    handleGet(get: Get) {\n        const topic = get.nodeId.split('/')[1];\n        const sendTo: Set<Actor> = new Set();\n        for (const storageAdapter of this.storageAdapters) {\n            if (get.from !== storageAdapter) {\n                sendTo.add(storageAdapter);\n            }\n        }\n        for (const peer of this.serverPeers) {\n            if (get.from !== peer) {\n                sendTo.add(peer);\n            }\n        }\n        if (!this.subscribersByTopic.has(topic)) {\n            this.subscribersByTopic.set(topic, new Set());\n        }\n        const subscribers = this.subscribersByTopic.get(topic);\n        if (subscribers) {\n            if (!subscribers.has(get.from)) {\n                subscribers.add(get.from);\n            }\n        }\n        for (const actor of sendTo) {\n            actor.postMessage(get);\n        }\n    }\n}\n\n/*\nlet actor: Actor;\nself.onconnect = () => {\n    console.log('router shared worker connected');\n    actor = actor || new Router();\n}\n*/\n\n// self.onconnect = (e) => Comlink.expose(actor, e.ports[0]);","import _ from '../lodash';\nimport {Actor}  from './Actor';\nimport {Message, Put, Get, UpdatedNodes} from './Message';\n\n// @ts-ignore\nimport Router from './Router';\n//import * as Comlink from \"comlink\";\n\nexport type NodeData = {\n    value: any;\n    updatedAt: number;\n};\n\nexport type Children = {\n    [key: string]: NodeData;\n}\n\nexport type Config = {\n    peerId?: string;\n    allowPublicSpace: boolean;\n    myPublicKey?: string;\n    enableStats: boolean;\n    webSocketPeers?: string[];\n    localOnly: boolean;\n}\n\nexport const DEFAULT_CONFIG: Config = {\n    allowPublicSpace: false,\n    enableStats: true,\n    localOnly: true\n}\n\n// TODO move memory storage to its own adapter? it would make things simpler here\nexport default class Node extends Actor {\n    root: Node;\n    parent?: Node;\n    children = new Map<string, Node>();\n    once_subscriptions = new Map<number, Function>();\n    on_subscriptions = new Map<number, Function>();\n    map_subscriptions = new Map<number, Function>();\n    counter = 0;\n    config: Config;\n    currentUser: any;\n    router: Router;\n\n    constructor(id = '', config?: Config, parent?: Node) {\n        super(id);\n        this.parent = parent;\n        this.config = config || (parent && parent.config) || DEFAULT_CONFIG;\n        if (parent) {\n            this.root = parent.root;\n            this.router = parent.router;\n        } else {\n            this.root = this;\n            //@ts-ignore\n            this.router = new Router({dbName: this.id + '-idb', peers: this.config.webSocketPeers});\n            //console.log('idbWorker', idbWorker);\n            //const router = Comlink.wrap(routerWorker);\n        }\n    }\n\n    getCurrentUser(): any {\n        return this.parent ? this.parent.getCurrentUser() : this.currentUser;\n    }\n\n    setCurrentUser(key: any) {\n        if (this.parent) {\n            this.parent.setCurrentUser(key);\n        } else {\n            this.currentUser = key;\n        }\n    }\n\n    handle(message: Message): void {\n        if (message instanceof Put) {\n            for (const [key, children] of Object.entries(message.updatedNodes)) {\n                if (!children || typeof children !== 'object') {\n                    continue;\n                }\n                if (key === this.id) {\n                    for (const [childKey, childData] of Object.entries(children)) {\n                        this.get(childKey).doCallbacks(childData, childKey); // TODO children should have proper NodeData\n                    }\n                }\n            }\n            this.parent && this.parent.handle(message);\n        }\n    };\n\n    get(key: string): Node {\n        const existing = this.children.get(key);\n        if (existing) {\n            return existing;\n        }\n        const newNode = new Node(`${this.id}/${key}`, this.config, this);\n        this.children.set(key, newNode);\n        return newNode;\n    }\n\n    user(pub: string | undefined): Node {\n        pub = pub || (this.root.currentUser && this.root.currentUser.pub);\n        if (!pub) {\n            throw new Error(\"no public key!\");\n        }\n        return this.get('user').get(pub as string);\n    }\n\n    auth(key: any) {\n        // TODO get public key from key\n        this.root.setCurrentUser(key);\n        return;\n    }\n\n    doCallbacks = (data: NodeData, key: string) => {\n        if (typeof data.value === 'string' && data.value.startsWith('{\":\":')) {\n            data.value = JSON.parse(data.value)[':'];\n        }\n        for (const [id, callback] of this.on_subscriptions) {\n            const event = { off: () => this.on_subscriptions.delete(id) };\n            callback(data.value, key, null, event);\n        }\n        for (const [id, callback] of this.once_subscriptions) {\n            callback(data.value, key, null, {});\n            this.once_subscriptions.delete(id);\n        }\n        if (this.parent) {\n            const parent = this.parent;\n            for (const [id, callback] of parent.map_subscriptions) {\n                const event = { off: () => parent.map_subscriptions.delete(id) };\n                callback(data.value, key, null, event);\n            }\n        }\n    };\n\n    put(value: any): void {\n        const updatedAt = Date.now();\n        if (Array.isArray(value)) {\n            throw new Error('put() does not support arrays');\n        }\n        if (typeof value === 'function') {\n            throw new Error('put() does not support functions');\n        }\n        if (typeof value === 'object' && value !== null) {\n            // TODO: update the whole path of parent nodes\n            for (const key in value) {\n                this.get(key).put(value[key]);\n            }\n            return;\n        }\n        this.children = new Map();\n        const updatedNodes: UpdatedNodes = {};\n        this.addParentNodes(updatedNodes, value, updatedAt);\n        const put = Put.new(updatedNodes, this);\n        this.handle(put);\n        this.router.postMessage(put);\n    }\n\n    private addParentNodes(updatedNodes: UpdatedNodes, value: any, updatedAt: number) {\n        if (this.parent) {\n            const childName = this.id.split('/').pop() as string;\n            const parentId = this.parent.id;\n            updatedNodes[parentId] = updatedNodes[parentId] || {};\n            updatedNodes[parentId][childName] = {value, updatedAt};\n            this.parent.addParentNodes(updatedNodes, {'#': this.parent.id }, updatedAt);\n        }\n    }\n\n    private request() {\n        if (this.parent) { // TODO router should decide whether to re-request from peers\n            const childKey = this.id.split('/').pop();\n            this.router.postMessage(Get.new(this.parent.id, this, undefined, childKey));\n        }\n    }\n\n    async once(callback?: Function | null): Promise<any> {\n        const id = this.counter++;\n        callback && this.once_subscriptions.set(id, callback);\n        this.request();\n    }\n\n    on(callback: Function): void {\n        const id = this.counter++;\n        this.on_subscriptions.set(id, callback);\n        //const event = { off: () => this.on_subscriptions.delete(id) };\n        this.request();\n    }\n\n    map(callback: Function): void {\n        const id = this.counter++;\n        this.map_subscriptions.set(id, callback);\n        // TODO: child key should probably still be included. But how to handle link responses?\n        this.router.postMessage(Get.new(this.id, this, undefined));\n    }\n\n    opt(opts: any) {\n        this.router.opt(opts);\n    }\n}","// @ts-nocheck\n\n/*eslint no-useless-escape: \"off\", camelcase: \"off\" */\n\nconst UNIQUE_ID_VALIDATORS = {\n  email: /^([\\w-]+(?:\\.[\\w-]+)*)@((?:[\\w-]+\\.)*\\w[\\w-]{0,66})\\.([a-z]{2,6}(?:\\.[a-z]{2})?)$/i,\n  bitcoin: /^[13][a-km-zA-HJ-NP-Z0-9]{26,33}$/,\n  bitcoin_address: /^[13][a-km-zA-HJ-NP-Z0-9]{26,33}$/,\n  ip: /^(([1-9]?\\d|1\\d\\d|2[0-5][0-5]|2[0-4]\\d)\\.){3}([1-9]?\\d|1\\d\\d|2[0-5][0-5]|2[0-4]\\d)$/,\n  ipv6: /^(?:[A-F0-9]{1,4}:){7}[A-F0-9]{1,4}$/,\n  gpg_fingerprint: null,\n  gpg_keyid: null,\n  google_oauth2: null,\n  tel: /^\\d{7,}$/,\n  phone: /^\\d{7,}$/,\n  keyID: null,\n  url: /[-a-zA-Z0-9@:%_\\+.~#?&//=]{2,256}\\.[a-z]{2,4}\\b(\\/[-a-zA-Z0-9@:%_\\+.~#?&//=]*)?/gi,\n  account: /^([\\w-]+(?:\\.[\\w-]+)*)@((?:[\\w-]+\\.)*\\w[\\w-]{0,66})\\.([a-z]{2,6}(?:\\.[a-z]{2})?)$/i,\n  uuid: /[0-9a-f]{8}\\-[0-9a-f]{4}\\-[0-9a-f]{4}\\-[0-9a-f]{4}\\-[0-9a-f]{12}/\n};\n\n// TODO this class could perhaps be removed\n\nclass Attribute {\n  constructor(a, b) {\n    if (typeof a === `object`) {\n      if (typeof a.value !== `string`) { throw new Error(`param1.value must be a string, got ${typeof a.value}: ${JSON.stringify(a.value)}`); }\n      if (typeof a.type !== `string`) { throw new Error(`param1.type must be a string, got ${typeof a.type}: ${JSON.stringify(a.type)}`); }\n      b = a.value;\n      a = a.type;\n    }\n    if (typeof a !== `string`) { throw new Error(`First param must be a string, got ${typeof a}: ${JSON.stringify(a)}`); }\n    if (!a.length) { throw new Error(`First param string is empty`); }\n    if (b) {\n      if (typeof b !== `string`) { throw new Error(`Second parameter must be a string, got ${typeof b}: ${JSON.stringify(b)}`); }\n      if (!b.length) { throw new Error(`Second param string is empty`); }\n      this.type = a;\n      this.value = b;\n    } else {\n      this.value = a;\n      const t = Attribute.guessTypeOf(this.value);\n      if (t) {\n        this.type = t;\n      } else {\n        throw new Error(`Type of attribute was omitted and could not be guessed`);\n      }\n    }\n  }\n\n  static getUuid() {\n    const b = a => a ? (a ^ Math.random() * 16 >> a / 4).toString(16) : ([1e7] + -1e3 + -4e3 + -8e3 + -1e11).replace(/[018]/g, b);\n    return new Attribute(`uuid`, b());\n  }\n\n  static getUniqueIdValidators() {\n    return UNIQUE_ID_VALIDATORS;\n  }\n\n  static isUniqueType(type) {\n    return Object.keys(UNIQUE_ID_VALIDATORS).indexOf(type) > -1;\n  }\n\n  isUniqueType() {\n    return Attribute.isUniqueType(this.type);\n  }\n\n  static guessTypeOf(value) {\n    for (const key in UNIQUE_ID_VALIDATORS) {\n      if (value.match(UNIQUE_ID_VALIDATORS[key])) {\n        return key;\n      }\n    }\n  }\n\n  static equals(a, b) {\n    return a.equals(b);\n  }\n\n  equals(a) {\n    return a && this.type === a.type && this.value === a.value;\n  }\n\n  uri() {\n    return `${encodeURIComponent(this.value)}:${encodeURIComponent(this.type)}`;\n  }\n}\n\nexport default Attribute;\n","import globalState from './global';\nimport session from './session';\n\n/**\n * Get a public space where only the specified user (public key) can write. Others can read.\n * @param pub The public key string or keypair object of the user. Defaults to the current user from session.\n * @returns {Node} The user space.\n */\nexport default function(pub: any = session.getKey()) {\n  if (typeof pub === 'string') {\n    return globalState().user(pub);\n  } else if (typeof pub === 'object') {\n    const userSpace = globalState().user(pub.pub);\n    userSpace.auth(pub);\n    return userSpace;\n  }\n}\n","// @ts-nocheck\n\nimport util from './util';\nimport Attribute from './Attribute';\nimport session from './session';\nimport publicState from './global';\nimport userState from './public';\nimport Key from './Key';\n\n// TODO: extract Group channels into their own class\n\nconst DEFAULT_PERMISSIONS = {read: true, write: true, admin: false};\n\n/**\n* Private communication channel between two or more participants ([Gun](https://github.com/amark/gun) public keys). Can be used independently of other Iris stuff.\n*\n* Used as a core element of [iris-messenger](https://github.com/irislib/iris-messenger).\n*\n* You can use iris.private(pub) to always use the same Channel object for a given pub.\n*\n* ---\n*\n* #### Key-value API\n* `channel.put(key, value)` and `channel.on(key, callback)`.\n*\n* Note that each participant has their own versions of each key-value — they don't overwrite each other. `channel.on()` callback returns them all by default and has a parameter that indicates whose value you got.\n*\n* While values are encrypted, encryption of keys is not implemented yet.\n*\n* #### Message API\n* `channel.send()` and `channel.getMessages()` for timestamp-indexed chat-style messaging.\n*\n* Message data is encrypted, but timestamps are public so that peers can return your messages in a sequential order.\n*\n* ---\n*\n* You can open a channel with yourself for a private key-value space or a \"note to self\" type chat with yourself.\n*\n* **Privacy disclaimer:** Channel ids, data values and messages are encrypted, but message timestamps are unencrypted so that peers can return them to you in a sequential order. By looking at the unencrypted timestamps (or Gun subscriptions), it is possible to guess who are communicating with each other. This could be improved by indexing messages by *day* only, so making the guess would be more difficult, while you could still return them in a semi-sequential order.\n*\n* @param {Object} options\n* @param {string} options.key your keypair\n* @param {Object} options.gun [gun](https://github.com/amark/gun) instance\n* @param options.participants (optional) string or string array or permissions object ({'pub1':{read:true,write:true,admin:false},'pub2'...}) of participant public keys (your own key is included by default)\n* @param {string} options.chatLink (optional) chat link instead of participants list\n* @param {string} options.uuid (group channels only) unique channel identifier. Leave out for new channel.\n* @param {string} options.name (group channels only) channel name\n* @example\n* // Copy & paste this to console at https://iris.to or other page that has gun, sea and iris-lib\n* // Due to an unsolved bug, someoneElse's messages only start showing up after a reload\n*\n* var gun1 = new Gun('https://gun-us.herokuapp.com/gun');\n* var gun2 = new Gun('https://gun-us.herokuapp.com/gun');\n* var myKey = await Key.getDefault();\n* var someoneElse = localStorage.getItem('someoneElsesKey');\n* if (someoneElse) {\n*  someoneElse = JSON.parse(someoneElse);\n* } else {\n*  someoneElse = await Key.generate();\n*  localStorage.setItem('someoneElsesKey', JSON.stringify(someoneElse));\n* }\n*\n* iris.Channel.initUser(gun1, myKey); // saves myKey.epub to gun.user().get('epub')\n* iris.Channel.initUser(gun2, someoneElse);\n*\n* var ourChannel = new iris.Channel({key: myKey, gun: gun1, participants: someoneElse.pub});\n* var theirChannel = new iris.Channel({key: someoneElse, gun: gun2, participants: myKey.pub});\n*\n* var myChannels = {}; // you can list them in a user interface\n* function printMessage(msg, info) {\n*  console.log(`[${new Date(msg.time).toLocaleString()}] ${info.from.slice(0,8)}: ${msg.text}`)\n* }\n* iris.Channel.getChannels(gun1, myKey, channel => {\n*  var pub = channel.getCurrentParticipants()[0];\n*  gun1.user(pub).get('profile').get('name').on(name => channel.name = name);\n*  myChannels[pub] = channel;\n*  channel.getMessages(printMessage);\n*  channel.on('mood', (mood, from) => console.log(from.slice(0,8) + ' is feeling ' + mood));\n* });\n*\n* // you can play with these in the console:\n* ourChannel.send('message from myKey');\n* theirChannel.send('message from someoneElse');\n*\n* ourChannel.put('mood', 'blessed');\n* theirChannel.put('mood', 'happy');\n*\n* @example https://github.com/irislib/iris-lib/blob/master/__tests__/Channel.js\n*/\nclass Channel {\n   // TODO: these should be done in a cleaner way\n  latestTime: any;\n  theirMsgsLastSeenDate: any;\n  myLastSeenTime: any;\n  theirMsgsLastSeenTime: any;\n  notificationSetting: any;\n  messageIds: any; // this is used from session.processMessage\n  latest: any;\n  uuid: any;\n  name: any;\n  attachments: any;\n\n  theirSecretUuids = {};\n  theirGroupSecrets = {};\n  secrets = {};\n  ourSecretChannelIds = {};\n  theirSecretChannelIds = {};\n  messages = {};\n  chatLinks = {};\n  groupSubscriptions = {};\n  directSubscriptions = {};\n  getParticipantsCallbacks = {};\n  myGroupSecret: any;\n  participants: any;\n\n  constructor(options: any) {\n    this.myGroupSecret = options.myGroupSecret;\n\n    if (options.chatLink) {\n      this.useChatLink(options);\n    }\n\n    if (typeof options.participants === `string`) {\n      this.addParticipant(options.participants, options.save);\n    } else if (Array.isArray(options.participants)) {\n      const o = {};\n      options.participants.forEach(p => o[p] = Object.assign({}, DEFAULT_PERMISSIONS));\n      options.participants = o;\n    }\n    if (typeof options.participants === `object`) { // it's a group channel\n      const keys = Object.keys(options.participants);\n      keys.forEach(k => {\n        if (k !== session.getKey().pub) {\n          this.addParticipant(k, options.save, Object.assign({}, DEFAULT_PERMISSIONS, options.participants[k]));\n        }\n      });\n      options.participants[session.getKey().pub] = options.participants[session.getKey().pub] || Object.assign({}, DEFAULT_PERMISSIONS);\n      if (options.uuid) {\n        this.uuid = options.uuid;\n        this.name = options.name;\n      } else {\n        options.uuid = Attribute.getUuid().value;\n        this.uuid = options.uuid;\n        options.participants[session.getKey().pub].admin = true;\n        options.participants[session.getKey().pub].founder = true;\n      }\n      this.getChatLinks({subscribe: true});\n    }\n    this.participants = options.participants;\n    if (options.uuid) { // It's a group channel\n      // share secret uuid with other participants. since secret is already non-deterministic, maybe uuid could also be?\n      // generate channel-specific secret and share it with other participants\n      // put() keys should be encrypted first? so you could do put(uuid, secret)\n      // what if you join the channel with 2 unconnected devices? on reconnect, the older secret would be overwritten and messages unreadable. maybe participants should store each others' old keys? or maybe you should store them and re-encrypt old stuff when key changes? return them with map() instead?\n      this.putDirect(`S${this.uuid}`, this.getMyGroupSecret());\n      this.getMySecretUuid().then(s => {\n        this.putDirect(this.uuid, s); // TODO: encrypt keys in put()\n      });\n      this.onTheirDirect(this.uuid, (s, k, from) => {\n        this.theirSecretUuids[from] = s;\n      });\n      this.onTheirDirect(`S${this.uuid}`, (s, k, from) => {\n        this.theirGroupSecrets[from] = s;\n      });\n      // need to make put(), on(), send() and getMessages() behave differently when it's a group and retain the old versions for mutual signaling\n    }\n    this.onTheir(`participants`, (participants, k, from) => {\n      let hasAdmin = false;\n      const keys = Object.keys(this.participants);\n      for (let i = 0; i < keys.length; i++) {\n        if (this.participants[keys[i]].admin || this.participants[keys[i]].inviter) {\n          hasAdmin = true;\n          break;\n        }\n      }\n      if (!hasAdmin) {\n        keys.forEach(k => this.participants[k].admin = true); // if no admins, make everyone admin\n      }\n      if (this.participants[from] && (this.participants[from].admin || this.participants[from].inviter)) {\n        if (typeof participants === `object`) {\n          if (JSON.stringify(this.participants) === JSON.stringify(participants)) { return; }\n          this.participants = participants;\n          delete this.participants[from].inviter;\n          Object.keys(participants).forEach(k => {\n            if (k !== session.getKey().pub) {\n              this.addParticipant(k, true, Object.assign({}, DEFAULT_PERMISSIONS, participants[k]), true);\n            }\n          });\n          this.participantsChanged();\n          options.saved = true;\n        }\n      }\n    });\n    if (!options.saved && (options.save === undefined || options.save === true)) {\n      this.save();\n    }\n  }\n\n  useChatLink(options) {\n    const s = options.chatLink.split('?');\n    if (s.length === 2) {\n      const chatWith = util.getUrlParameter('chatWith', s[1]);\n      const channelId = util.getUrlParameter('channelId', s[1]);\n      const inviter = util.getUrlParameter('inviter', s[1]);\n      const pub = inviter || chatWith;\n      if (chatWith) {\n        options.participants = pub;\n      } else if (channelId && inviter && inviter !== session.getKey().pub) { // TODO! initializing it twice breaks things - new secret is generated\n        options.uuid = channelId;\n        options.participants = {};\n        options.participants[inviter] = Object.assign({inviter: true}, DEFAULT_PERMISSIONS);\n      }\n      if (pub !== session.getKey().pub) {\n        const sharedSecret = util.getUrlParameter('s', s[1]);\n        const linkId = util.getUrlParameter('k', s[1]);\n        if (sharedSecret && linkId) {\n          this.save(); // save the channel first so it's there before inviter subscribes to it\n          options.saved = true;\n          publicState().user(pub).get('chatLinks').get(linkId).get('encryptedSharedKey').on(async encrypted => {\n            const sharedKey = await Key.decrypt(encrypted, sharedSecret);\n            const encryptedChatRequest = await Key.encrypt(session.getKey().pub, sharedSecret); // TODO encrypt is not deterministic, it uses salt\n            const channelRequestId = await util.getHash(encryptedChatRequest);\n            publicState(sharedKey).get('chatRequests').get(channelRequestId.slice(0, 12)).put(encryptedChatRequest);\n          });\n        }\n      }\n    }\n  }\n\n  getTheirSecretUuid(pub) {\n    return new Promise(resolve => {\n      if (!this.theirSecretUuids[pub]) {\n        this.onTheirDirect(this.uuid, s => {\n          this.theirSecretUuids[pub] = s;\n          resolve(this.theirSecretUuids[pub]);\n        }, pub);\n      } else {\n        resolve(this.theirSecretUuids[pub]);\n      }\n    });\n  }\n\n  getTheirGroupSecret(pub) {\n    if (pub === session.getKey().pub) { return this.getMyGroupSecret(); }\n    return new Promise(resolve => {\n      if (!this.theirGroupSecrets[pub]) {\n        this.onTheirDirect(`S${this.uuid}`, s => {\n          this.theirGroupSecrets[pub] = s;\n          resolve(this.theirGroupSecrets[pub]);\n        }, pub);\n      } else {\n        resolve(this.theirGroupSecrets[pub]);\n      }\n    });\n  }\n\n  changeMyGroupSecret() {\n    this.myGroupSecret = Key.random(32).toString('base64');\n    // TODO: secret should be archived and probably messages should include the encryption key id so past messages don't become unreadable\n    this.putDirect(`S${this.uuid}`, this.myGroupSecret);\n  }\n\n  /**\n  * Unsubscribe messages from a channel participants\n  *\n  * @param {string} participant public key\n  */\n  async mute(participant) {\n    publicState().user(participant).get(this.theirSecretUuids[participant]).off();\n    // TODO: persist\n  }\n\n  /**\n  * Mute user and prevent them from seeing your further (and maybe past) messages\n  *\n  * @param {string} participant public key\n  */\n  async block(participant) {\n    this.mute(participant);\n    this.putDirect(this.uuid, null);\n    this.putDirect(`S${this.uuid}`, null);\n    delete this.secrets[participant];\n    delete this.ourSecretChannelIds[participant];\n    delete this.theirSecretChannelIds[participant];\n    this.changeMyGroupSecret();\n  }\n\n  async getMySecretUuid() {\n    if (!this.mySecretUuid) {\n      const mySecret = await Key.secret(session.getKey().epub, session.getKey());\n      const mySecretHash = await util.getHash(mySecret);\n      this.mySecretUuid = await util.getHash(mySecretHash + this.uuid);\n    }\n    return this.mySecretUuid;\n  }\n\n  /**\n  * List participants of the channel (other than you)\n  */\n  getCurrentParticipants() {\n    return Object.keys(this.secrets);\n  }\n\n  /**\n  * Subscribe to the changing list of participants by channel admins\n  */\n  getParticipants(callback) {\n    if (this.getParticipantsCallbackId) {\n      this.getParticipantsCallbackId++;\n    } else {\n      this.getParticipantsCallbackId = 1;\n    }\n    this.getParticipantsCallbacks[this.getParticipantsCallbackId] = callback;\n    if (this.participants) {\n      callback(this.participants);\n    }\n  }\n\n  participantsChanged() {\n    Object.keys(this.getParticipantsCallbacks).forEach(id => {\n      this.getParticipantsCallbacks[id](this.participants);\n    });\n  }\n\n  /**\n  * Returns either the uuid of a group channel or the public key of a direct channel.\n  */\n  getId() {\n    return this.uuid || this.getCurrentParticipants()[0];\n  }\n\n  async getSecret(pub) {\n    if (!this.secrets[pub]) {\n      const epub = await util.gunOnceDefined(publicState().user(pub).get(`epub`));\n      this.secrets[pub] = await Key.secret(epub, session.getKey());\n    }\n    return this.secrets[pub];\n  }\n\n  /**\n  *\n  */\n  static async getOurSecretChannelId(pub, pair) {\n    const epub = await util.gunOnceDefined(publicState().user(pub).get(`epub`));\n    const secret = await Key.secret(epub, pair);\n    return util.getHash(secret + pub);\n  }\n\n  /**\n  *\n  */\n  static async getTheirSecretChannelId(pub, pair) {\n    const epub = await util.gunOnceDefined(publicState().user(pub).get(`epub`));\n    const secret = await Key.secret(epub, pair);\n    return util.getHash(secret + pair.pub);\n  }\n\n  /**\n  * Calls back with Channels that you have initiated or written to.\n  * @param {Object} keypair Key keypair that the gun instance is authenticated with\n  * @param callback callback function that is called for each public key you have a channel with\n  */\n  static async getChannels(callback, listenToChatLinks = true) {\n    const keypair = session.getKey();\n    const mySecret = await Key.secret(keypair.epub, keypair);\n    if (listenToChatLinks) {\n      Channel.getMyChatLinks( undefined, undefined, true);\n    }\n    const seen = {};\n\n    const handleChannel = async (value, ourSecretChannelId) => {\n      if (value && !seen[ourSecretChannelId]) {\n        seen[ourSecretChannelId] = true;\n        if (ourSecretChannelId.length > 44) {\n          publicState().user().get(`chats`).get(ourSecretChannelId).put(null);\n          return;\n        }\n        const encryptedChatId = await util.gunOnceDefined(publicState().user().get(`chats`).get(ourSecretChannelId).get(`pub`));\n        const chatId = await Key.decrypt(encryptedChatId, mySecret);\n        if (!chatId) {\n          return;\n        }\n        if (chatId.pub || typeof chatId === `string`) {\n          callback(new Channel({\n            key: keypair,\n            participants: chatId.pub || chatId,\n            save: false\n          }));\n        } else if (chatId.uuid && chatId.participants && chatId.myGroupSecret) {\n          callback(new Channel({\n            key: keypair,\n            participants: chatId.participants,\n            uuid: chatId.uuid,\n            myGroupSecret: chatId.myGroupSecret,\n            save: false\n          }));\n        }\n      }\n    };\n\n    publicState().user().get(`chats`).map(handleChannel);\n  }\n\n  getMyGroupSecret() { // group secret could be deterministic: hash(encryptToSelf(uuid + iterator))\n    if (!this.myGroupSecret) {\n      this.changeMyGroupSecret();\n    }\n    return this.myGroupSecret;\n  }\n\n  async getOurSecretChannelId(pub) {\n    if (!this.ourSecretChannelIds[pub]) {\n      const secret = await this.getSecret(pub);\n      this.ourSecretChannelIds[pub] = await util.getHash(secret + pub);\n    }\n    return this.ourSecretChannelIds[pub];\n  }\n\n  async getTheirSecretChannelId(pub) {\n    if (!this.theirSecretChannelIds[pub]) {\n      const secret = await this.getSecret(pub);\n      this.theirSecretChannelIds[pub] = await util.getHash(secret + session.getKey().pub);\n    }\n    return this.theirSecretChannelIds[pub];\n  }\n\n  /**\n  * Get messages from the channel\n  */\n  async getMessages(callback) { // TODO: save callback and apply it when new participants are added to channel\n    this.getCurrentParticipants().forEach(async pub => {\n      if (pub !== session.getKey().pub) {\n        // Subscribe to their messages\n        let theirSecretChannelId;\n        if (this.uuid) {\n          theirSecretChannelId = await this.getTheirSecretUuid(pub);\n        } else {\n          theirSecretChannelId = await this.getTheirSecretChannelId(pub);\n        }\n        publicState().user(pub).get(`chats`).get(theirSecretChannelId).get(`msgs`).map().once((data, key) => {this.messageReceived(callback, data, this.uuid || pub, false, key, pub);});\n      }\n      if (!this.uuid) {\n        // Subscribe to our messages\n        const ourSecretChannelId = await this.getOurSecretChannelId(pub);\n        userState().get(`chats`).get(ourSecretChannelId).get(`msgs`).map().once((data, key) => {this.messageReceived(callback, data, pub, true, key, session.getKey().pub);});\n      }\n    });\n    if (this.uuid) {\n      // Subscribe to our messages\n      const mySecretUuid = await this.getMySecretUuid();\n      userState().get(`chats`).get(mySecretUuid).get(`msgs`).map().once((data, key) => {this.messageReceived(callback, data, this.uuid, true, key, session.getKey().pub);});\n    }\n  }\n\n  async messageReceived(callback, data, channelId, selfAuthored, key, from) {\n    if (this.messages[key] || !data) {\n      return;\n    }\n    const secret = this.uuid ? (await this.getTheirGroupSecret(from)) : (await this.getSecret(channelId));\n    const decrypted = await Key.decrypt(data, secret);\n    if (typeof decrypted !== `object`) {\n      return;\n    }\n    const info = {selfAuthored, channelId, from};\n    this.messages[key] = decrypted;\n    callback(decrypted, info);\n  }\n\n  /**\n  * Get latest message in this channel. Useful for channel listing.\n  */\n  async getLatestMsg(callback) {\n    const callbackIfLatest = async (msg, info) => {\n      if (!this.latest) {\n        this.latest = msg;\n        callback(msg, info);\n      } else {\n        const t = (typeof this.latest.time === `string` ? this.latest.time : this.latest.time.toISOString());\n        if (t < msg.time) {\n          this.latest = msg;\n          callback(msg, info);\n        }\n      }\n    };\n    this.onMy('latestMsg', msg => callbackIfLatest(msg, {selfAuthored: true, from: session.getKey().pub}));\n    this.onTheir('latestMsg', (msg, k, from) => callbackIfLatest(msg, {selfAuthored: false, from}));\n  }\n\n  /**\n  * Useful for notifications\n  * @param {integer} time last seen msg time (default: now)\n  */\n  async setMyMsgsLastSeenTime(time?: string) {\n    time = time || new Date().toISOString();\n    return this.put(`msgsLastSeenTime`, time);\n  }\n\n  /**\n  * Useful for notifications\n  */\n  async getMyMsgsLastSeenTime(callback) {\n    this.onMy(`msgsLastSeenTime`, time => {\n      this.myMsgsLastSeenTime = time;\n      if (callback) {\n        callback(this.myMsgsLastSeenTime);\n      }\n    });\n  }\n\n  /**\n  * For \"seen\" status indicator\n  */\n  async getTheirMsgsLastSeenTime(callback) {\n    this.onTheir(`msgsLastSeenTime`, time => {\n      this.theirMsgsLastSeenTime = time;\n      if (callback) {\n        callback(this.theirMsgsLastSeenTime);\n      }\n    });\n  }\n\n  async removeParticipant(pub) {\n    this.addParticipant(pub, true, {read: false, write: false});\n  }\n\n  /**\n  * Add a public key to the channel or update its permissions\n  * @param {string} pub\n  */\n  async addParticipant(pub: string, save = true, permissions?: any, subscribe?: boolean) {\n    if (this.uuid) {\n      return;\n    }\n    if (permissions === undefined) {\n      permissions = DEFAULT_PERMISSIONS;\n    }\n    if (this.secrets[pub] && JSON.stringify(this.secrets[pub]) === JSON.stringify(permissions)) { // TODO: should be this.participants[pub]\n      return;\n    }\n    this.secrets[pub] = null;\n    this.getSecret(pub);\n    const ourSecretChannelId = await this.getOurSecretChannelId(pub);\n    if (save) {\n      // Save their public key in encrypted format, so in channel listing we know who we are channeling with\n      const mySecret = await Key.secret(session.getKey().epub, session.getKey());\n      publicState().user().get(`chats`).get(ourSecretChannelId).get(`pub`).put(await Key.encrypt({pub}, mySecret));\n    }\n    if (this.uuid) {\n      this.participants[pub] = permissions;\n      if (save) {\n        this.putDirect(`S${this.uuid}`, this.getMyGroupSecret());\n        this.getMySecretUuid().then(s => {\n          this.putDirect(this.uuid, s); // TODO: encrypt keys in put()\n        });\n        this.onTheirDirect(this.uuid, (s, k, from) => {\n          this.theirSecretUuids[from] = s;\n        });\n        this.onTheirDirect(`S${this.uuid}`, (s, k, from) => {\n          this.theirGroupSecrets[from] = s;\n        });\n        this.save();\n      }\n    }\n    if (subscribe) {\n      Object.values(this.directSubscriptions).forEach(arr => {\n        arr.forEach(o => {\n          if (!o.from || o.from === pub) {\n            this._onTheirDirectFromUser(pub, o.key, o.callback);\n          }\n        });\n      });\n      Object.values(this.groupSubscriptions).forEach(arr => {\n        arr.forEach(o => {\n          if (o.from && o.from !== pub) { return; }\n          if (permissions.write) {\n            this._onTheirGroupFromUser(pub, o.key, o.callback);\n          } else { // unsubscribe\n            o.event && o.event.off();\n          }\n        });\n      });\n    }\n  }\n\n  /**\n  * Send a message to the channel\n  * @param msg string or {time, text, ...} object\n  */\n  async send(msg) {\n    if (typeof msg === `string`) {\n      msg = msg.trim();\n      if (msg.length === 0) {\n        return;\n      }\n      msg = {\n        time: (new Date()).toISOString(),\n        text: msg\n      };\n    } else if (typeof msg === `object`) {\n      msg.time = msg.time || (new Date()).toISOString();\n    } else {\n      throw new Error(`msg param must be a string or an object`);\n    }\n    //publicState().user().get('message').set(temp);\n    if (this.uuid) {\n      const encrypted = await Key.encrypt(JSON.stringify(msg), this.getMyGroupSecret());\n      const mySecretUuid = await this.getMySecretUuid();\n      userState().get(`chats`).get(mySecretUuid).get(`msgs`).get(`${msg.time}`).put(encrypted);\n      userState().get(`chats`).get(mySecretUuid).get(`latestMsg`).put(encrypted);\n    } else {\n      const keys = this.getCurrentParticipants();\n      for (let i = 0;i < keys.length;i++) {\n        const encrypted = await Key.encrypt(JSON.stringify(msg), (await this.getSecret(keys[i])));\n        const ourSecretChannelId = await this.getOurSecretChannelId(keys[i]);\n        userState().get(`chats`).get(ourSecretChannelId).get(`msgs`).get(`${msg.time}`).put(encrypted);\n        userState().get(`chats`).get(ourSecretChannelId).get(`latestMsg`).put(encrypted);\n      }\n    }\n  }\n\n  /**\n  * Save the channel to our channels list without sending a message\n  */\n  async save() {\n    if (this.uuid) {\n      const mySecretUuid = await this.getMySecretUuid();\n      userState().get(`chats`).get(mySecretUuid).get('msgs').get('a').put(null);\n      this.put(`participants`, this.participants); // public participants list\n      const mySecret = await Key.secret(session.getKey().epub, session.getKey());\n      userState().get(`chats`).get(mySecretUuid).get(`pub`).put(await Key.encrypt({\n        uuid: this.uuid,\n        myGroupSecret: this.getMyGroupSecret(),\n        participants: this.participants // private participants list\n      }, mySecret));\n      this.participantsChanged();\n    } else {\n      const keys = this.getCurrentParticipants();\n      for (let i = 0;i < keys.length;i++) {\n        const ourSecretChannelId = await this.getOurSecretChannelId(keys[i]);\n        userState().get(`chats`).get(ourSecretChannelId).get('msgs').get('a').put(null);\n      }\n    }\n  }\n\n  /**\n  * Save a key-value pair, encrypt value. Each participant in the Channel writes to their own version of the key-value pair — they don't overwrite the same one.\n  * @param {string} key\n  * @param value\n  */\n  async put(key, value) {\n    return (this.uuid ? this.putGroup : this.putDirect).call(this, key, value);\n  }\n\n  async putGroup(key, value) {\n    if (key === `msgs`) { throw new Error(`Sorry, you can't overwrite the msgs field which is used for .send()`); }\n    const encrypted = await Key.encrypt(JSON.stringify(value), this.getMyGroupSecret());\n    const mySecretUuid = await this.getMySecretUuid();\n    userState().get(`chats`).get(mySecretUuid).get(key).put(encrypted);\n  }\n\n  async putDirect(key, value) {\n    if (key === `msgs`) { throw new Error(`Sorry, you can't overwrite the msgs field which is used for .send()`); }\n    const keys = this.getCurrentParticipants();\n    for (let i = 0;i < keys.length;i++) {\n      const encrypted = await Key.encrypt(JSON.stringify(value), (await this.getSecret(keys[i])));\n      const ourSecretChannelId = await this.getOurSecretChannelId(keys[i]);\n      userState().get(`chats`).get(ourSecretChannelId).get(key).put(encrypted);\n    }\n  }\n\n  /**\n  * Subscribe to a key-value pair. Callback returns every participant's value unless you limit it with *from* param.\n  * @param {string} key\n  * @param {function} callback\n  * @param {string} from public key whose value you want, or *\"me\"* for your value only, or *\"them\"* for the value of others only\n  */\n  async on(key: string, callback: Function, from?: string) {\n    return (this.uuid ? this.onGroup : this.onDirect).call(this, key, callback, from);\n  }\n\n  async onDirect(key: string, callback: Function, from?: string) {\n    if (!from || from === `me` || from === session.getKey().pub) {\n      this.onMy(key, (val: any) => callback(val, session.getKey().pub));\n    }\n    if (!from || (from !== `me` && from !== session.getKey().pub)) {\n      this.onTheir(key, (val: any, k: string, pub: string) => callback(val, pub));\n    }\n  }\n\n  async onGroup(key: string, callback: Function, from?: string) {\n    if (!from || from === `me` || from === session.getKey().pub) {\n      this.onMyGroup(key, val => callback(val, session.getKey().pub));\n    }\n    if (!from || (from !== `me` && from !== session.getKey().pub)) {\n      this.onTheirGroup(key, (val, k, pub) => callback(val, pub));\n    }\n  }\n\n  async onMy(key: string, callback: Function) {\n    return (this.uuid ? this.onMyGroup : this.onMyDirect).call(this, key, callback);\n  }\n\n  async onMyDirect(key: string, callback: Function) {\n    if (typeof callback !== 'function') {\n      throw new Error(`onMy callback must be a function, got ${typeof callback}`);\n    }\n    const keys = this.getCurrentParticipants();\n    for (let i = 0;i < keys.length;i++) {\n      const ourSecretChannelId = await this.getOurSecretChannelId(keys[i]);\n      publicState().user().get(`chats`).get(ourSecretChannelId).get(key).on(async (data: any) => {\n        const decrypted = await Key.decrypt(data, (await this.getSecret(keys[i])));\n        if (decrypted) {\n          callback(typeof decrypted.v !== `undefined` ? decrypted.v : decrypted, key);\n        }\n      });\n      break;\n    }\n  }\n\n  async onMyGroup(key, callback) {\n    if (typeof callback !== 'function') {\n      throw new Error(`onMy callback must be a function, got ${typeof callback}`);\n    }\n    const mySecretUuid = await this.getMySecretUuid();\n    const mySecret = await this.getMyGroupSecret();\n    publicState().user().get(`chats`).get(mySecretUuid).get(key).on(async data => {\n      const decrypted = await Key.decrypt(data, mySecret);\n      if (decrypted) {\n        callback(typeof decrypted.v !== `undefined` ? decrypted.v : decrypted, key, session.getKey().pub);\n      }\n    });\n  }\n\n  async onTheir(key: string, callback: Function, from: string) {\n    return (this.uuid ? this.onTheirGroup : this.onTheirDirect).call(this, key, callback, from);\n  }\n\n  async _onTheirDirectFromUser(key: string, callback: Function, pub: string) {\n    if (!this.hasWritePermission(pub)) { return; }\n    const theirSecretChannelId = await this.getTheirSecretChannelId(pub);\n    publicState().user(pub).get(`chats`).get(theirSecretChannelId).get(key).on(async (data: any) => {\n      if (!this.hasWritePermission(pub)) { return; }\n      const decrypted = await Key.decrypt(data, (await this.getSecret(pub)));\n      if (decrypted) {\n        callback(typeof decrypted.v !== `undefined` ? decrypted.v : decrypted, key, pub);\n      }\n    });\n  }\n\n  async onTheirDirect(key: string, callback: Function, from: string) { // TODO: subscribe to new channel participants\n    if (typeof callback !== 'function') {\n      throw new Error(`onTheir callback must be a function, got ${typeof callback}`);\n    }\n    if (!Object.prototype.hasOwnProperty.call(this.directSubscriptions, key)) {\n      this.directSubscriptions[key] = [];\n    }\n    this.directSubscriptions[key].push({key, callback, from});\n    const participants = this.getCurrentParticipants();\n    participants.forEach(async pub => {\n      if (from && pub !== from) { return; }\n      this._onTheirDirectFromUser(pub, key, callback);\n    });\n  }\n\n  hasWritePermission(pub) {\n    return !this.uuid || (this.participants && this.participants[pub] && this.participants[pub].write);\n  }\n\n  async _onTheirGroupFromUser(pub: string, key: string, callback: Function, subscription: any) {\n    if (!this.hasWritePermission(pub)) { return; }\n    const theirSecretUuid = await this.getTheirSecretUuid(pub);\n    publicState().user(pub).get(`chats`).get(theirSecretUuid).get(key).on(async (data: any, _a: any, _b: any, e: Event) => {\n      if (subscription) { subscription.event = e; }\n      if (!this.hasWritePermission(pub)) { return; }\n      const decrypted = await Key.decrypt(data, (await this.getTheirGroupSecret(pub)));\n      if (decrypted) {\n        callback(typeof decrypted.v !== `undefined` ? decrypted.v : decrypted, key, pub);\n      }\n    });\n  }\n\n  async onTheirGroup(key, callback, from) {\n    if (typeof callback !== 'function') {\n      throw new Error(`onTheir callback must be a function, got ${typeof callback}`);\n    }\n    if (!Object.prototype.hasOwnProperty.call(this.groupSubscriptions, key)) {\n      this.groupSubscriptions[key] = [];\n    }\n    const subscription = {key, callback, from};\n    this.groupSubscriptions[key].push(subscription);\n\n    this.getParticipants(participants => {\n      Object.keys(participants).forEach(async pub => {\n        if (from && pub !== from) { return; }\n        if (!(participants[pub] && participants[pub].write)) { return; }\n        this._onTheirGroupFromUser(pub, key, callback, subscription);\n      });\n    });\n  }\n\n  /**\n  * Set typing status\n  */\n  setTyping(isTyping, timeout = 5) {\n    isTyping = typeof isTyping === `undefined` ? true : isTyping;\n    timeout = timeout * 1000;\n    this.put(`typing`, isTyping ? new Date().toISOString() : new Date(0).toISOString());\n    clearTimeout(this.setTypingTimeout);\n    this.setTypingTimeout = setTimeout(() => this.put(`typing`, false), timeout);\n  }\n\n  /**\n  * Get typing status\n  */\n  getTyping(callback, timeout = 5) { // TODO callback not called on setTyping(false), at least for self chat\n    timeout = timeout * 1000;\n    this.onTheir(`typing`, (typing, key, pub) => {\n      if (callback) {\n        const isTyping = typing && new Date() - new Date(typing) <= timeout;\n        callback(isTyping, pub);\n        this.getTypingTimeouts = this.getTypingTimeouts || {};\n        clearTimeout(this.getTypingTimeouts[pub]);\n        if (isTyping) {\n          this.getTypingTimeouts[pub] = setTimeout(() => callback(false, pub), timeout);\n        }\n      }\n    });\n  }\n\n  /**\n  * Get a simple link that points to the channel.\n  *\n  * Direct channel: both users need to give their simple links. Use createChatLink() to get a two-way link that needs to be given by one user only.\n  *\n  * Group channel: Works only if the link recipient has been already added onto the channel participants list.\n  */\n  getSimpleLink(urlRoot = 'https://iris.to/') {\n    if (this.uuid) {\n      return `${urlRoot}?channelId=${this.uuid}&inviter=${session.getKey().pub}`;\n    }\n    return `${urlRoot}?chatWith=${this.getCurrentParticipants()[0]}`;\n  }\n\n  /**\n  *\n  */\n  async getChatLinks(opts: any = {}) {\n    let {callback, urlRoot, subscribe} = opts;\n    urlRoot = urlRoot || 'https://iris.to/';\n    if (!this.uuid) { throw new Error('Only group channels may have chat links'); }\n    const chatLinks: any[] = [];\n    const chatLinkSubscriptions = {};\n    this.on('chatLinks', (links: any, from: string) => {\n      // TODO: check admin permissions\n      if (!links || typeof links !== 'object') { return; }\n      Object.keys(links).forEach(linkId => {\n        const link = links[linkId];\n        if (link === null) {\n          chatLinkSubscriptions[linkId] && chatLinkSubscriptions[linkId].off(); // unsubscribe removed chat link\n          delete chatLinkSubscriptions[linkId];\n          callback && callback({id: linkId, url: null});\n          return;\n        }\n        if (chatLinks.indexOf(linkId) !== -1) { return; }\n        const channels = [];\n        chatLinks.push(linkId);\n        const url = Channel.formatChatLink({urlRoot, inviter: from, channelId: this.uuid, sharedSecret: link.sharedSecret, linkId});\n        callback && callback({url, id: linkId});\n        if (subscribe) {\n          publicState().user(link.sharedKey.pub).get('chatRequests').map(async (encPub, requestId, a, e) => {\n            if (!encPub || typeof encPub !== 'string' || encPub.length < 10) { return; }\n            chatLinkSubscriptions[linkId] = e;\n            const s = JSON.stringify(encPub);\n            if (channels.indexOf(s) === -1) {\n              channels.push(s);\n              const pub = await Key.decrypt(encPub, link.sharedSecret);\n              this.addParticipant(pub, undefined, undefined, true);\n            }\n          });\n        }\n      });\n    });\n  }\n\n  async createChatLink(urlRoot = 'https://iris.to/') {\n    const sharedKey = await Key.generate();\n    const sharedKeyString = JSON.stringify(sharedKey);\n    const sharedSecret = await Key.secret(sharedKey.epub, sharedKey);\n    const encryptedSharedKey = await Key.encrypt(sharedKeyString, sharedSecret);\n    const ownerSecret = await Key.secret(session.getKey().epub, session.getKey());\n    const ownerEncryptedSharedKey = await Key.encrypt(sharedKeyString, ownerSecret);\n    let linkId = await util.getHash(encryptedSharedKey);\n    linkId = linkId.slice(0, 12);\n\n    // User has to exist, in order for .get(chatRequests).on() to be ever triggered\n    publicState(sharedKey).get('chatRequests').put({a: 1});\n\n    this.chatLinks[linkId] = {sharedKey, sharedSecret};\n    this.put('chatLinks', this.chatLinks);\n    userState().get('chatLinks').get(linkId).put({encryptedSharedKey, ownerEncryptedSharedKey});\n\n    return Channel.formatChatLink({urlRoot, channelId: this.uuid, inviter: session.getKey().pub, sharedSecret, linkId});\n  }\n\n  /**\n  * Set the user's online/active status\n  * @param {string} activity string: set the activity status every 3 seconds, null/false: stop updating\n  */\n  static setActivity(activity) {\n    if (publicState().irisActivityStatus === activity) { return; }\n    publicState().irisActivityStatus = activity;\n    clearTimeout(publicState().setActivityTimeout);\n    const update = () => {\n      publicState().user().get(`activity`).put({status: activity, time: new Date().toISOString()});\n    };\n    update();\n    function timerUpdate() {\n      update();\n      publicState().setActivityTimeout = setTimeout(timerUpdate, 3000);\n    }\n    if (activity) {\n      timerUpdate();\n    }\n  }\n\n  /**\n  * Get the online status of a user.\n  *\n  * @param {string} pubKey public key of the user\n  * @param {boolean} callback receives a boolean each time the user's online status changes\n  */\n  static getActivity(pubKey, callback) {\n    let timeout;\n    publicState().user(pubKey).get(`activity`).on(activity => {\n      if (!activity || !(activity.time && activity.status)) { return; }\n      clearTimeout(timeout);\n      const now = new Date();\n      const activityDate = new Date(activity.time);\n      const isActive = activityDate > new Date(now.getTime() - 10 * 1000) && activityDate < new Date(now.getTime() + 30 * 1000);\n      callback({isActive, lastActive: activity.time, status: activity.status});\n      if (isActive) {\n        timeout = setTimeout(() => callback({isOnline: false, lastActive: activity.time}), 10000);\n      }\n    });\n  }\n\n  static formatChatLink({urlRoot, chatWith, channelId, inviter, sharedSecret, linkId}) {\n    const enc = encodeURIComponent;\n    if (channelId && inviter) {\n      return `${urlRoot}?channelId=${enc(channelId)}&inviter=${enc(inviter)}&s=${enc(sharedSecret)}&k=${enc(linkId)}`;\n    }\n    return `${urlRoot}?chatWith=${enc(chatWith)}&s=${enc(sharedSecret)}&k=${enc(linkId)}`;\n  }\n\n  /**\n  * Creates a channel link that can be used for two-way communication, i.e. only one link needs to be exchanged.\n  */\n  static async createChatLink(urlRoot = 'https://iris.to/') {\n    const user = publicState().user();\n    const key = session.getKey();\n\n    // We create a new Gun user whose private key is shared with the chat link recipients.\n    // Chat link recipients can contact you by writing their public key to the shared key's user space.\n    const sharedKey = await Key.generate();\n    const sharedKeyString = JSON.stringify(sharedKey);\n    const sharedSecret = await Key.secret(sharedKey.epub, sharedKey);\n    const encryptedSharedKey = await Key.encrypt(sharedKeyString, sharedSecret);\n    const ownerSecret = await Key.secret(key.epub, key);\n    const ownerEncryptedSharedKey = await Key.encrypt(sharedKeyString, ownerSecret);\n    let linkId = await util.getHash(encryptedSharedKey);\n    linkId = linkId.slice(0, 12);\n\n    // User has to exist, in order for .get(chatRequests).on() to be ever triggered\n    publicState(sharedKey).get('chatRequests').put({a: 1}).get('chatRequests').put({a: 1});\n\n    user.get('chatLinks').get(linkId).put({encryptedSharedKey, ownerEncryptedSharedKey});\n\n    return Channel.formatChatLink({urlRoot, chatWith: key.pub, sharedSecret, linkId});\n  }\n\n  /**\n  *\n  */\n  static async getMyChatLinks(urlRoot = 'https://iris.to/', callback: Function, subscribe = false) {\n    const key = session.getKey();\n    const user = publicState().user();\n    const mySecret = await Key.secret(key.epub, key);\n    const chatLinks = [];\n    user.get('chatLinks').map((data, linkId) => {\n      if (!data || chatLinks.indexOf(linkId) !== -1) { return; }\n      const channels = [];\n      user.get('chatLinks').get(linkId).get('ownerEncryptedSharedKey').on(async enc => {\n        if (!enc || chatLinks.indexOf(linkId) !== -1) { return; }\n        chatLinks.push(linkId);\n        const sharedKey = await Key.decrypt(enc, mySecret);\n        const sharedSecret = await Key.secret(sharedKey.epub, sharedKey);\n        const url = Channel.formatChatLink({urlRoot, chatWith: key.pub, sharedSecret, linkId});\n        if (callback) {\n          callback({url, id: linkId});\n        }\n        if (subscribe) {\n          publicState().user(sharedKey.pub).get('chatRequests').map(async (encPub, requestId) => {\n            if (!encPub) { return; }\n            const s = JSON.stringify(encPub);\n            if (channels.indexOf(s) === -1) {\n              channels.push(s);\n              const pub = await Key.decrypt(encPub, sharedSecret);\n              const channel = new Channel({key, participants: pub});\n              channel.save();\n            }\n            publicState(sharedKey).get('chatRequests').get(requestId).put(null);\n          });\n        }\n      });\n    });\n  }\n\n  /**\n  *\n  */\n  removeGroupChatLink(linkId) {\n    this.chatLinks[linkId] = null;\n    this.put('chatLinks', this.chatLinks);\n    publicState().user().get('chatLinks').get(linkId).put(null);\n  }\n\n  /**\n  *\n  */\n  static removePrivateChatLink(key, linkId) {\n    publicState().user().auth(key);\n    publicState().user().get('chatLinks').get(linkId).put(null);\n  }\n\n  /**\n  *\n  */\n  static async deleteChannel(key, pub) {\n    publicState().user().auth(key);\n    const channelId = await Channel.getOurSecretChannelId(pub, key);\n    publicState().user().get('channels').get(channelId).put(null);\n    publicState().user().get('channels').get(channelId).off();\n  }\n\n  /**\n  *\n  */\n  static async deleteGroup(key, uuid) {\n    const mySecret = await Key.secret(key.epub, key);\n    const mySecretHash = await util.getHash(mySecret);\n    const mySecretUuid = await util.getHash(mySecretHash + uuid);\n    publicState().user().auth(key);\n    publicState().user().get('channels').get(mySecretUuid).put(null);\n    publicState().user().get('channels').get(mySecretUuid).off();\n  }\n}\n\nexport default Channel;\n","import Node from './db/Node';\n\nlet local: Node;\n\n/**\n * Get a state that is only synced in memory and local storage.\n *\n * Useful for storing things like UI state, local indexes or logged in user.\n * @returns {Node}\n */\nexport default function() {\n  if (!local) {\n    local = new Node('local');\n  }\n  return local;\n}","import Channel from './Channel';\nimport session from './session';\n\nconst channels = new Map<string, Channel>();\n\n/**\n * Private channel that only you and publicKey can read/write.\n * @param publicKey\n * @returns {Channel}\n */\nexport default function(publicKey = session.getKey(), chatLink?: string): Channel {\n  let channel = channels.get(publicKey);\n  if (!channel) {\n    channel = new Channel({participants: publicKey, chatLink})\n    channels.set(publicKey, channel);\n  }\n  return channel;\n}","import local from './local';\n\nlet blockedUsers: { [key: string]: boolean } = {};\n\nexport default function() {\n  if (!blockedUsers) {\n    blockedUsers = {};\n    local().get('block').map((isBlocked: boolean, user: string) => {\n      if (isBlocked === blockedUsers[user]) { return; }\n      if (isBlocked) {\n        blockedUsers[user] = isBlocked;\n        local().get('groups').map((_v: any, k: string) => {\n          local().get('groups').get(k).get(user).put(false);\n        });\n      } else {\n        delete blockedUsers[user];\n      }\n    });\n  }\n  return blockedUsers;\n}","import local from \"./local\";\nimport userSpace from './public';\nimport blockedUsers from './blockedUsers';\n\nlet counter = 0;\nconst cache = new Map<string, Map<string, any>>();\nconst callbacks = new Map();\n\ntype Event = {\n  off: () => void;\n}\n\n/**\n * Aggregates public data from all users in the group.\n *\n * For example, the public message feed, message replies and likes are aggregated using this.\n * @param groupName\n * @returns object\n */\nexport default function(groupName = 'everyone') {\n  return {\n    get(path: string, callback: any) {\n      const groupNode = local().get('groups').get(groupName);\n      const follows: { [key: string]: boolean; } = {};\n      requestAnimationFrame(() => {\n        groupNode.map((isFollowing: any, user: string) => {\n          if (blockedUsers()[user]) { return; } // TODO: allow to specifically query blocked users?\n          if (follows[user] && follows[user] === isFollowing) { return; }\n          follows[user] = isFollowing;\n          if (isFollowing) { // TODO: callback on unfollow, for unsubscribe\n            let node = userSpace(user);\n            if (path && path !== '/') {\n              node = path.split('/').reduce((sum:any, s:string) => sum.get(decodeURIComponent(s)), node);\n            }\n            callback(node, user);\n          }\n        });\n      });\n    },\n\n    _cached_map(cached: Map<string, any> | undefined, cacheKey: string, path: string, myEvent: Event, callback: Function) {\n      if (!cached) {\n        const cached = new Map();\n        cache.set(cacheKey, cached);\n        this.get(path, (node: any, from: string) => node.map((value: any, key: string, x: any) => {\n          const item = {value, key, from};\n          cached.set(key, item);\n          for (let cb of callbacks.get(cacheKey).values()) {\n            cb(value, key, x, myEvent, from);\n          }\n        }));\n      } else {\n        for (let item of cached.values()) {\n          callback(item.value, item.key, 0, myEvent, item.from);\n        }\n      }\n    },\n\n    // TODO: this should probably store just the most recent value, not everyone's value\n    // TODO: for counting of likes etc, use this.count() instead\n    _cached_on(cached: Map<string, any> | undefined, cacheKey: string, path: string, myEvent: Event, callback: Function) {\n      if (!cached) {\n        const cached = new Map();\n        cache.set(cacheKey, cached);\n        this.get(path, (node: any, from: string) => node.on((value: any, key: string, x: any) => {\n          const item = {value, key, from};\n          cached.set(from, item);\n          for (let cb of callbacks.get(cacheKey).values()) {\n            cb(value, key, x, myEvent, from);\n          }\n        }));\n      } else {\n        for (let item of cached.values()) {\n          callback(item.value, item.key, 0, myEvent, item.from);\n        }\n      }\n    },\n\n    _cached_count(cached: Map<string, any> | undefined, cacheKey: string, path: string, myEvent: Event, callback: Function) {\n      if (!cached) {\n        const cached = new Map();\n        cache.set(cacheKey, cached);\n        this.get(path, (node: any, from: string) => node.on((value: any, key: string) => {\n          value ? cached.set(from, true) : cached.delete(from);\n          const count = cached.size;\n          for (let cb of callbacks.get(cacheKey).values()) {\n            cb(count, key, null, myEvent, from);\n          }\n        }));\n      } else {\n        callback(cached.size, path.split('/').pop(), null, myEvent);\n      }\n    },\n\n    _cached_fn(fn: string, path: string, callback: Function) {\n      const cacheKey = `${fn}:${groupName}:${path}`;\n\n      let callbackId = counter++;\n      if (callbacks.has(cacheKey)) {\n        callbacks.get(cacheKey).set(callbackId, callback);\n      } else {\n        callbacks.set(cacheKey, new Map([[callbackId, callback]]));\n      }\n\n      const myEvent = {off: () => {\n        let myCallbacks = callbacks.get(cacheKey);\n        myCallbacks && myCallbacks.delete(callbackId);\n      }};\n\n      const cached = cache.get(cacheKey);\n\n      switch (fn) {\n        case 'map':\n          this._cached_map(cached, cacheKey, path, myEvent, callback);\n          break;\n        case 'on':\n          this._cached_on(cached, cacheKey, path, myEvent, callback);\n          break;\n        case 'count':\n          this._cached_count(cached, cacheKey, path, myEvent, callback);\n          break;\n      }\n    },\n\n    map(path: string, callback: Function) { // group queries are slow, so we cache them\n      this._cached_fn('map', path, callback);\n    },\n\n    on(path: string, callback: Function) {\n      this._cached_fn('on', path, callback);\n    },\n\n    count(path: string, callback: Function) {\n      this._cached_fn('count', path, callback);\n    }\n  }\n}","// @ts-nocheck\n\nimport _ from './lodash';\nimport session from './session';\nimport util from './util';\nimport publicState from './global';\nimport privateState from './private';\nimport local from './local';\nimport group from './group';\nimport Key from './Key';\n\nconst NOTIFICATION_SERVICE_URL = 'https://iris-notifications.herokuapp.com/notify';\n// const notificationSound = new Audio('../../assets/audio/notification.mp3'); // TODO\nlet loginTime;\nlet unseenMsgsTotal = 0;\nlet unseenNotificationCount = 0;\nconst webPushSubscriptions = {};\n\nfunction desktopNotificationsEnabled() {\n  return window.Notification && Notification.permission === 'granted';\n}\n\nfunction notifyMsg(msg, info, channelId, onClick) {\n  function shouldNotify() {\n    if (msg.timeObj < loginTime) { return false; }\n    if (info.selfAuthored) { return false; }\n    if (document.visibilityState === 'visible') { return false; }\n    const channel = privateState(channelId);\n    if (channel.notificationSetting === 'nothing') { return false; }\n    if (channel.notificationSetting === 'mentions' && !msg.text.includes(session.getMyName())) { return false; }\n    return true;\n  }\n  function shouldDesktopNotify() {\n    if (!desktopNotificationsEnabled()) { return false; }\n    return shouldNotify();\n  }\n  function shouldAudioNotify() {\n    return shouldNotify();\n  }\n  if (shouldAudioNotify()) {\n    //notificationSound.play(); // TODO\n  }\n  if (shouldDesktopNotify()) {\n    let body, title;\n    const channel = privateState(channelId);\n    if (channel.uuid) {\n      title = channel.participantProfiles[info.from].name;\n      body = `${name}: ${msg.text}`;\n    } else {\n      title = 'Message'\n      body = msg.text;\n    }\n    body = util.truncateString(body, 50);\n    let desktopNotification = new Notification(title, { // TODO: replace with actual name\n      icon: '/assets/img/icon128.png',\n      body,\n      silent: true\n    });\n    desktopNotification.onclick = function() {\n      changeUnseenNotificationCount(-1);\n      onClick && onClick();\n      window.focus();\n    };\n  }\n}\n\nfunction changeChatUnseenMsgsCount(chatId, change) {\n  const chat = privateState(chatId);\n  if (!chat) return;\n  const chatNode = local().get('channels').get(chatId);\n  if (change) {\n    unseenMsgsTotal += change;\n    chat.unseen += change;\n  } else {\n    unseenMsgsTotal = unseenMsgsTotal - (chat.unseen || 0);\n    chat.unseen = 0;\n  }\n  chatNode.get('unseen').put(chat.unseen);\n  unseenMsgsTotal = unseenMsgsTotal >= 0 ? unseenMsgsTotal : 0;\n  local().get('unseenMsgsTotal').put(unseenMsgsTotal);\n}\n\nconst publicVapidKey = 'BMqSvZArOIdn7vGkYplSpkZ70-Qt8nhYbey26WVa3LF3SwzblSzm3n3HHycpNkAKVq7MCkrzFuTFs_en7Y_J2MI';\n\nfunction urlBase64ToUint8Array(base64String) {\n  const padding = '='.repeat((4 - base64String.length % 4) % 4);\n  const base64 = (base64String + padding)\n    .replace(/-/g, '+')\n    .replace(/_/g, '/');\n\n  const rawData = window.atob(base64);\n  const outputArray = new Uint8Array(rawData.length);\n\n  for (let i = 0; i < rawData.length; ++i) {\n    outputArray[i] = rawData.charCodeAt(i);\n  }\n  return outputArray;\n}\n\nasync function subscribe(reg) {\n  try {\n    const subscription = await reg.pushManager.subscribe({\n      userVisibleOnly: true,\n      applicationServerKey: urlBase64ToUint8Array(publicVapidKey)\n    });\n    addWebPushSubscription(subscription);\n  } catch (e) {\n    console.error('web push subscription error', e);\n  }\n}\n\nasync function subscribeToWebPush() {\n  console.log('subscribing to web push', navigator.serviceWorker);\n  if (!desktopNotificationsEnabled() || !navigator.serviceWorker) { return false; }\n  await navigator.serviceWorker.ready;\n  const reg = await navigator.serviceWorker.getRegistration();\n  reg.active.postMessage({key: session.getKey()});\n  const sub = await reg.pushManager.getSubscription();\n  sub ? addWebPushSubscription(sub) : subscribe(reg);\n}\n\nconst addWebPushSubscriptionsToChats = _.debounce(() => {\n  const arr = Object.values(webPushSubscriptions);\n  session.channelIds.forEach(channelId => {\n    privateState(channelId).put('webPushSubscriptions', arr);\n  });\n}, 5000);\n\nfunction removeSubscription(hash) {\n  delete webPushSubscriptions[hash];\n  publicState().user().get('webPushSubscriptions').get(hash).put(null);\n  addWebPushSubscriptionsToChats();\n}\n\nasync function addWebPushSubscription(s, saveToGun = true) {\n  const myKey = session.getKey();\n  const mySecret = await Key.secret(myKey.epub, myKey);\n  const enc = await Key.encrypt(s, mySecret);\n  const hash = await util.getHash(JSON.stringify(s));\n  if (saveToGun) {\n    publicState().user().get('webPushSubscriptions').get(hash).put(enc);\n  }\n  webPushSubscriptions[hash] = s;\n  addWebPushSubscriptionsToChats();\n}\n\nasync function getWebPushSubscriptions() {\n  const myKey = session.getKey();\n  const mySecret = await Key.secret(myKey.epub, myKey);\n  publicState().user().get('webPushSubscriptions').map(async enc => {\n    if (!enc) { return; }\n    const s = await Key.decrypt(enc, mySecret);\n    addWebPushSubscription(s, false);\n  });\n}\n\nfunction getEpub(user) {\n  return new Promise(resolve => {\n    publicState().user(user).get('epub').on(async (epub,k,x,e) => {\n      if (epub) {\n        e.off();\n        resolve(epub);\n      }\n    });\n  });\n}\n\nasync function getNotificationText(notification) {\n  const profile = await publicState().user(notification.from).get('profile').once();\n  const name = (profile && profile.name) || 'someone';\n  const event = notification.event || notification.action;\n  let eventText;\n  if (event === 'like') eventText = `${name} liked your post`;\n  else if (event === 'reply') eventText = `${name} replied to your post`;\n  else if (event === 'mention') eventText = `${name} mentioned you in their post`;\n  else if (event === 'follow') eventText = `${name} started following you`;\n  else eventText = `${name} sent you a notification: ${event}`;\n  return eventText;\n}\n\nfunction subscribeToIrisNotifications(onClick?: Function) {\n  let notificationsSeenTime: any;\n  let notificationsShownTime: any;\n  publicState().user().get('notificationsSeenTime').on(v => {\n    notificationsSeenTime = v;\n    console.log(v);\n  });\n  publicState().user().get('notificationsShownTime').on(v => notificationsShownTime = v);\n  const setNotificationsShownTime = _.debounce(() => {\n    publicState().user().get('notificationsShownTime').put(new Date().toISOString());\n  }, 1000);\n  const alreadyHave = new Set();\n  group().on(`notifications/${session.getPubKey()}`, async (encryptedNotification, k, x, e, from) => {\n      const id = from.slice(0,30) + encryptedNotification.slice(0,30);\n      if (alreadyHave.has(id)) { return; }\n      alreadyHave.add(id);\n      const epub = await getEpub(from);\n      const secret = await Key.secret(epub, session.getKey());\n      const notification = await Key.decrypt(encryptedNotification, secret);\n      if (!notification || typeof notification !== 'object') { return; }\n      setNotificationsShownTime();\n      notification.from = from;\n      local().get('notifications').get(notification.time).put(notification);\n      if (!notificationsSeenTime || (notificationsSeenTime < notification.time)) {\n        changeUnseenNotificationCount(1);\n      }\n      if (!notificationsShownTime || notificationsShownTime < notification.time) {\n        console.log('was new!');\n        const text = await getNotificationText(notification);\n        let desktopNotification = new Notification(text, {\n          icon: '/assets/img/icon128.png',\n          body: text,\n          silent: true\n        });\n        desktopNotification.onclick = function() {\n          const link = notification.target ? `/post/${notification.target}` : `/profile/${notification.from}`;\n          onClick && onClick(link);\n          changeUnseenNotificationCount(-1);\n          window.focus();\n        };\n      }\n    });\n}\n\nfunction changeUnseenNotificationCount(change) {\n  if (!change) {\n    unseenNotificationCount = 0;\n    publicState().user().get('notificationsSeenTime').put(new Date().toISOString());\n  } else {\n    unseenNotificationCount += change;\n    unseenNotificationCount = Math.max(unseenNotificationCount, 0);\n  }\n  local().get('unseenNotificationCount').put(unseenNotificationCount);\n}\n\nasync function sendIrisNotification(recipient, notification) {\n  if (!(recipient && notification)) { return; } // TODO: use typescript or sth :D\n  if (typeof notification === 'object') { notification.time = new Date().toISOString() }\n  const epub = await getEpub(recipient);\n  const secret = await Key.secret(epub, session.getKey());\n  const enc = await Key.encrypt(notification, secret);\n  publicState().user().get('notifications').get(recipient).put(enc);\n}\n\nasync function sendWebPushNotification(recipient, notification) {\n  console.log('sending web push notification to', recipient, notification);\n  const channel = privateState(recipient);\n  const myKey = session.getKey();\n  const shouldWebPush = (recipient === myKey.pub) || !(channel.activity && channel.activity.isActive);\n  if (shouldWebPush && channel.webPushSubscriptions) {\n    const subscriptions = [];\n    const participants = Object.keys(channel.webPushSubscriptions);\n    for (let i = 0; i < participants.length; i++) {\n      const participant = participants[i];\n      const secret = await channel.getSecret(participant);\n      const payload = {\n        title: await Key.encrypt(notification.title, secret),\n        body: await Key.encrypt(notification.body, secret),\n        from:{pub: myKey.pub, epub: myKey.epub}\n      };\n      channel.webPushSubscriptions[participant].forEach(s => {\n        if (s && s.endpoint) {\n          subscriptions.push({subscription: s, payload});\n        }\n      });\n    }\n    if (subscriptions.length === 0) {return;}\n    fetch(NOTIFICATION_SERVICE_URL, {\n      method: 'POST',\n      body: JSON.stringify({subscriptions}),\n      headers: {\n        'content-type': 'application/json'\n      }\n    }).catch(() => {});\n  }\n}\n\nfunction init() {\n  loginTime = new Date();\n  unseenMsgsTotal = 0;\n}\n\nexport default {init, notifyMsg, getNotificationText, sendWebPushNotification, changeUnseenNotificationCount, subscribeToIrisNotifications, sendIrisNotification, changeChatUnseenCount: changeChatUnseenMsgsCount, webPushSubscriptions, subscribeToWebPush, getWebPushSubscriptions, removeSubscription};\n","// @ts-nocheck\nimport Key from './Key';\nimport notifications from './notifications';\nimport Channel from './Channel';\nimport util from './util';\nimport _ from './lodash';\nimport Fuse from \"fuse.js\";\nimport local from './local';\nimport electron from './electron';\nimport user from './public';\nimport privateState from './private';\nimport blockedUsers from './blockedUsers';\n\nlet key: any;\nlet myName: string;\nlet latestChatLink: string;\nlet onlineTimeout: any;\nlet ourActivity: any;\nlet noFollows: boolean;\nlet noFollowers: boolean;\nlet searchIndex: any;\nlet initCalled: boolean;\nconst searchableItems: any = {};\nconst getExtendedFollowsCalled = new Map<string, number>();\n\nconst DEFAULT_FOLLOW = 'hyECQHwSo7fgr2MVfPyakvayPeixxsaAWVtZ-vbaiSc.TXIp8MnCtrnW6n2MrYquWPcc-DTmZzMBmc2yaGv9gIU';\n\nconst DEFAULT_SETTINGS = {\n  electron: {\n    openAtLogin: true,\n    minimizeOnClose: true\n  },\n  local: {\n    enableWebtorrent: !util.isMobile,\n    enablePublicPeerDiscovery: true,\n    autoplayWebtorrent: true,\n    maxConnectedPeers: util.isElectron ? 2 : 1\n  }\n};\n\n/**\n * User session management utilities.\n */\nexport default {\n  /**\n   * Log in with a key from localStorage.\n   *\n   * If no key is found and options.autologin is not false, a new user will be created.\n   *\n   * If options.autofollow is not false, the default follow will be added.\n   * @param options\n   */\n  init(options: any = {}) {\n    if (initCalled) { return; }\n    initCalled = true;\n    let localStorageKey = localStorage.getItem('chatKeyPair');\n    console.log('localStorageKey', localStorageKey);\n    if (localStorageKey) {\n      this.login(JSON.parse(localStorageKey));\n    } else if (options.autologin !== false) {\n      this.loginAsNewUser(options);\n    } else {\n      this.clearIndexedDB();\n    }\n    setTimeout(() => {\n      local().get('block').map(() => {\n        this.updateSearchIndex();\n      });\n      this.updateSearchIndex();\n    });\n    setInterval(() => {\n      if (this.taskQueue.length) {\n        //console.log('this.taskQueue', this.taskQueue.length);\n        const t = this.taskQueue.shift();\n        t && t();\n      }\n    }, 10);\n  },\n\n  DEFAULT_SETTINGS,\n  DEFAULT_FOLLOW,\n\n  taskQueue: [] as any[],\n\n  updateSearchIndex: _.throttle(() => {\n    const options = {keys: ['name'], includeScore: true, includeMatches: true, threshold: 0.3};\n    const values = Object.values(_.omit(searchableItems, Object.keys(blockedUsers())));\n    searchIndex = new Fuse(values, options);\n    local().get('searchIndexUpdated').put(true);\n  }, 2000, {leading:true}),\n\n  saveSearchResult: _.throttle(k => {\n      local().get('contacts').get(k).put({followDistance: searchableItems[k].followDistance,followerCount: searchableItems[k].followers.size});\n  }, 1000, {leading:true}),\n\n  addFollow(callback: Function, k: string, followDistance: number, follower?: string) {\n    if (searchableItems[k]) {\n      if (searchableItems[k].followDistance > followDistance) {\n        searchableItems[k].followDistance = followDistance;\n      }\n      follower && searchableItems[k].followers.add(follower);\n    } else {\n      searchableItems[k] = {key: k, followDistance, followers: new Set(follower && [follower])};\n      this.taskQueue.push(() => {\n        user(k).get('profile').get('name').on((name: string) => {\n          searchableItems[k].name = name;\n          local().get('contacts').get(k).get('name').put(name);\n          callback && callback(k, searchableItems[k]);\n        });\n      });\n    }\n    this.saveSearchResult(k);\n    callback && callback(k, searchableItems[k]);\n    this.updateSearchIndex();\n    this.updateNoFollows();\n    this.updateNoFollowers();\n  },\n\n  removeFollow(k: string, followDistance: number, follower: string) {\n    if (followDistance === 1) {\n      local().get('contacts').get(k).put(false);\n      local().get('groups').get('follows').get(k).put(false);\n      if (searchableItems[k]) {\n        searchableItems[k].followers.delete(follower);\n        this.updateNoFollows();\n        this.updateNoFollowers();\n      }\n    }\n    if (searchableItems[k] && searchableItems[k].followers.size === 0) {\n      delete searchableItems[k];\n      local().get('contacts').get(k).put(false);\n      local().get('groups').get('everyone').get(k).put(false);\n    }\n  },\n\n  getExtendedFollows(callback: Function, k = key.pub, maxDepth = 3, currentDepth = 1) {\n    const called = getExtendedFollowsCalled.get(k);\n    if (called && called <= currentDepth) {\n      return;\n    }\n    getExtendedFollowsCalled.set(k, currentDepth);\n\n    this.addFollow(callback, k, currentDepth - 1);\n\n    user(k).get('follow').map((isFollowing: boolean, followedKey: string) => { // TODO: unfollow\n      if (isFollowing) {\n        this.addFollow(callback, followedKey, currentDepth, k);\n        if (currentDepth < maxDepth) {\n          this.taskQueue.push(() => this.getExtendedFollows(callback, followedKey, maxDepth, currentDepth + 1));\n        }\n      } else {\n        this.removeFollow(followedKey, currentDepth, k);\n      }\n    });\n\n    return searchableItems;\n  },\n\n  updateNoFollows: _.throttle(() => {\n    const v = Object.keys(searchableItems).length <= 1;\n    if (v !== noFollows) {\n      noFollows = v;\n      local().get('noFollows').put(noFollows);\n    }\n  }, 1000, {leading:true}),\n\n  updateNoFollowers: _.throttle(() => {\n    const v = !(searchableItems[key.pub] && (searchableItems[key.pub].followers.size > 0));\n    if (v !== noFollowers) {\n      noFollowers = v;\n      local().get('noFollowers').put(noFollowers);\n    }\n  }, 1000, {leading:true}),\n\n  getSearchIndex() {\n    return searchIndex;\n  },\n\n  setOurOnlineStatus() {\n    const activeRoute = window.location.hash;\n    Channel.setActivity(ourActivity = 'active');\n    const setActive = _.debounce(() => {\n      const chatId = activeRoute && activeRoute.replace('#/profile/','').replace('#/chat/','');\n      const chat = privateState(chatId);\n      if (chat && !ourActivity) {\n        chat.setMyMsgsLastSeenTime();\n      }\n      Channel.setActivity(ourActivity = 'active');\n      clearTimeout(onlineTimeout);\n      onlineTimeout = setTimeout(() => Channel.setActivity(ourActivity = 'online'), 30000);\n    }, 1000);\n    document.addEventListener(\"touchmove\", setActive);\n    document.addEventListener(\"mousemove\", setActive);\n    document.addEventListener(\"keypress\", setActive);\n    document.addEventListener(\"visibilitychange\", () => {\n      if (document.visibilityState === 'visible') {\n        Channel.setActivity(ourActivity = 'active');\n        const chatId = location.pathname.slice(1).replace('chat/','');\n        const chat = activeRoute && privateState(chatId);\n        if (chat) {\n          chat.setMyMsgsLastSeenTime();\n          notifications.changeChatUnseenCount(chatId, 0);\n        }\n      } else {\n        Channel.setActivity(ourActivity = 'online');\n      }\n    });\n    setActive();\n    window.addEventListener(\"beforeunload\", () => {\n      Channel.setActivity(ourActivity = null);\n    });\n  },\n\n  updateGroups() {\n    this.getExtendedFollows((k: string, info: any) => {\n      if (info.followDistance <= 1) {\n        local().get('groups').get('follows').get(k).put(true);\n      }\n      local().get('groups').get('everyone').get(k).put(true);\n      if (k === this.getPubKey()) {\n        this.updateNoFollowers();\n      }\n    });\n  },\n\n  /**\n   * Log in with a private key.\n   * @param key\n   */\n  login(k: any) {\n    console.log('login', k);\n    const shouldRefresh = !!key;\n    console.log('shouldRefresh', shouldRefresh, 'key', key);\n    key = k;\n    localStorage.setItem('chatKeyPair', JSON.stringify(k));\n    user().auth(key);\n    user().put({epub: key.epub});\n    notifications.subscribeToWebPush();\n    notifications.getWebPushSubscriptions();\n    //notifications.subscribeToIrisNotifications();\n    Channel.getMyChatLinks( undefined, (chatLink: any) => {\n      local().get('chatLinks').get(chatLink.id).put(chatLink.url);\n      latestChatLink = chatLink.url;\n    });\n    this.setOurOnlineStatus();\n    Channel.getChannels( (c: Channel) => this.addChannel(c));\n    user().get('profile').get('name').on((name: any) => {\n      if (name && typeof name === 'string') {\n        myName = name;\n      }\n    });\n    // a lot of this is iris-messenger stuff\n    notifications.init();\n    local().get('loggedIn').put(true);\n    console.log('local().get(\\'loggedIn\\').put(true);', local());\n    local().get('settings').once().then(settings => {\n      if (!settings) {\n        local().get('settings').put(DEFAULT_SETTINGS.local);\n      } else if (settings.enableWebtorrent === undefined || settings.autoplayWebtorrent === undefined) {\n        local().get('settings').get('enableWebtorrent').put(DEFAULT_SETTINGS.local.enableWebtorrent);\n        local().get('settings').get('autoplayWebtorrent').put(DEFAULT_SETTINGS.local.autoplayWebtorrent);\n      }\n    });\n    user().get('block').map((isBlocked: boolean, user: string) => {\n      local().get('block').get(user).put(isBlocked);\n      if (isBlocked) {\n        delete searchableItems[user];\n      }\n    });\n    this.updateGroups();\n    if (shouldRefresh) {\n      location.reload();\n    }\n    if (electron) {\n      electron.get('settings').on(electron => {\n        local().get('settings').get('electron').put(electron);\n      });\n      electron.get('user').put(key.pub);\n    }\n    local().get('filters').get('group').once().then(v => {\n      if (!v) {\n        local().get('filters').get('group').put('follows');\n      }\n    });\n  },\n\n\n\n  /**\n   * Create a new user account and log in.\n   * @param options {Object} - Options for the new account.\n   * @returns {Promise<*>}\n   */\n  loginAsNewUser(options: any = {}) {\n    const name = options.name || util.generateName();\n    console.log('loginAsNewUser name', name);\n    return Key.generate().then(k => {\n      this.login(k);\n      user().get('profile').put({a:null});\n      user().get('profile').get('name').put(name);\n      local().get('filters').put({a:null});\n      local().get('filters').get('group').put('follows');\n      Channel.createChatLink().then(l => latestChatLink = l);\n      setTimeout(() => {\n        if (options.autofollow !== false) {\n          console.log('autofollowing', DEFAULT_FOLLOW);\n          user().get('follow').get(DEFAULT_FOLLOW).put(true);\n        }\n      }, 1000); // maybe wait for login return instead\n    });\n  },\n\n  /**\n   * Log out the current user.\n   * @returns {Promise<void>}\n   */\n  async logOut() {\n    if (electron) {\n      electron.get('user').put(null);\n    }\n    // TODO: remove subscription from your channels\n    if (navigator.serviceWorker) {\n      const reg = await navigator.serviceWorker.getRegistration();\n      if (reg && reg.pushManager) {\n        reg.active?.postMessage({key: null});\n        const sub = await reg.pushManager.getSubscription();\n        if (sub) {\n          const hash = await util.getHash(JSON.stringify(sub));\n          notifications.removeSubscription(hash);\n          sub.unsubscribe && sub.unsubscribe();\n        }\n      }\n    }\n    this.clearIndexedDB();\n    localStorage.clear(); // TODO clear only iris data\n    window.location.hash = '';\n    window.location.href = '/';\n    location.reload();\n  },\n\n  clearIndexedDB() {\n    return new Promise(resolve => {\n      const r1 = window.indexedDB.deleteDatabase('local()');\n      const r2 = window.indexedDB.deleteDatabase('radata');\n      let r1done = false;\n      let r2done = false;\n      const check = () => {\n        r1done && r2done && resolve(undefined);\n      }\n      r1.onerror = r2.onerror = e => console.error(e);\n      //r1.onblocked = r2.onblocked = e => console.error('blocked', e);\n      r1.onsuccess = () => {\n        r1done = true;\n        check();\n      }\n      r2.onsuccess = () => {\n        r2done = true;\n        check();\n      }\n    });\n  },\n\n  getMyChatLink() {\n    return latestChatLink || util.getProfileLink(key.pub);\n  },\n\n  /**\n   * Get the keypair of the logged in user.\n   * @returns {*}\n   */\n  getKey() { return key; },\n\n  /**\n   * Get the public key of the logged in user.\n   * @returns {*}\n   */\n  getPubKey() {\n    return key && key.pub;\n  },\n\n  /**\n   * Get the name of the logged in user.\n   * @returns {*}\n   */\n  getMyName() { return myName; }, // TODO maybe remove and use iris.user().get('profile').get('name') instead?\n\n  myPeerUrl: (ip: string) => `http://${ip}:8767/gun`,\n\n  async shareMyPeerUrl(channel: Channel) {\n    const myIp = await local().get('settings').get('electron').get('publicIp').once();\n    myIp && channel.put && channel.put('my_peer', this.myPeerUrl(myIp));\n  },\n\n  newChannel(pub: string, chatLink?: string) {\n    if (!pub || this.channelIds.has(pub)) {\n      return;\n    }\n    const chat = privateState(pub, chatLink);\n    this.addChannel(chat);\n    return chat;\n  },\n\n  addChannel(chat: Channel) {\n    this.taskQueue.push(() => {\n      let pub = chat.getId();\n      if (this.channelIds.has(pub)) { return; }\n      this.channelIds.add(pub);\n      const chatNode = local().get('channels').get(pub);\n      chatNode.get('latestTime').on((t: string) => {\n        if (t && (!chat.latestTime || t > chat.latestTime)) {\n          chat.latestTime = t;\n        } else {\n          // chatNode.get('latestTime').put(chat.latestTime); // omg recursion\n        }\n      });\n      chatNode.get('theirMsgsLastSeenTime').on((t: string) => {\n        if (!t) { return; }\n        const d = new Date(t);\n        if (!chat.theirMsgsLastSeenDate || chat.theirMsgsLastSeenDate < d) {\n          chat.theirMsgsLastSeenDate = d;\n        }\n      });\n      chat.getLatestMsg && chat.getLatestMsg((latest: any, info: any) => {\n        this.processMessage(pub, latest, info);\n      });\n      notifications.changeChatUnseenCount(pub, 0);\n      chat.notificationSetting = 'all';\n      chat.onMy('notificationSetting', (val: any) => {\n        chat.notificationSetting = val;\n      });\n      //$(\".chat-list\").append(el);\n      chat.theirMsgsLastSeenTime = '';\n      chat.getTheirMsgsLastSeenTime((time: any) => {\n        if (chat && time && time >= chat.theirMsgsLastSeenTime) {\n          chat.theirMsgsLastSeenTime = time;\n          chatNode.get('theirMsgsLastSeenTime').put(time);\n        }\n      });\n      chat.getMyMsgsLastSeenTime((time: any) => {\n        chat.myLastSeenTime = new Date(time);\n        if (chat.latest && chat.myLastSeenTime >= chat.latest.time) {\n          notifications.changeChatUnseenCount(pub, 0);\n        }\n      });\n      chat.isTyping = false;\n      chat.getTyping(isTyping => {\n        chat.isTyping = isTyping;\n        local().get('channels').get(pub).get('isTyping').put(isTyping);\n      });\n      chat.online = {};\n      Channel.getActivity(pub, (activity) => {\n        if (chat) {\n          chatNode.put({theirLastActiveTime: activity && activity.lastActive, activity: activity && activity.isActive && activity.status});\n          chat.activity = activity;\n        }\n      });\n      if (chat.uuid) {\n        let isDarkMode = window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches;\n        chat.participantProfiles = {};\n        chat.on('name', v => {\n          chat.name = v;\n          searchableItems[chat.uuid] = {name: v, uuid: chat.uuid};\n          local().get('channels').get(chat.uuid).get('name').put(v);\n        });\n        chat.on('photo', v => {\n          searchableItems[chat.uuid] = searchableItems[chat.uuid] || {};\n          searchableItems[chat.uuid].photo = v;\n          local().get('channels').get(chat.uuid).get('photo').put(v)\n        });\n        chat.on('about', v => local().get('channels').get(chat.uuid).get('about').put(v));\n        chat.getParticipants(participants => {\n          delete participants.undefined; // TODO fix where it comes from\n          if (typeof participants === 'object') {\n            let keys = Object.keys(participants);\n            keys.forEach((k, i) => {\n              let hue = 360 / Math.max(keys.length, 2) * i; // TODO use css filter brightness\n              chat.participantProfiles[k] = {permissions: participants[k], color: `hsl(${hue}, 98%, ${isDarkMode ? 80 : 33}%)`};\n              user(k).get('profile').get('name').on(name => {\n                chat.participantProfiles[k].name = name;\n              });\n            });\n          }\n          local().get('channels').get(chat.uuid).get('participants').put(participants);\n        });\n        chat.inviteLinks = {};\n        chat.getChatLinks({callback: ({url, id}) => {\n          console.log('got chat link', id, url);\n          chat.inviteLinks[id] = url; // TODO use State\n          local().get('inviteLinksChanged').put(true);\n        }});\n      } else {\n        // TODO do we want this?\n        user(pub).get('profile').get('name').on(v => local().get('channels').get(pub).get('name').put(v))\n      }\n      if (chat.put) {\n        chat.onTheir('webPushSubscriptions', (s, k, from) => {\n          if (!Array.isArray(s)) { return; }\n          chat.webPushSubscriptions = chat.webPushSubscriptions || {};\n          chat.webPushSubscriptions[from || pub] = s;\n        });\n        const arr = Object.values(notifications.webPushSubscriptions);\n        setTimeout(() => chat.put('webPushSubscriptions', arr), 5000);\n        this.shareMyPeerUrl(chat);\n      }\n      chat.onTheir('call', call => {\n        local().get('call').put({pub, call});\n      });\n      local().get('channels').get(pub).put({enabled:true});\n      /* Disable private peer discovery, since they're not connecting anyway\n      if (chat.onTheir) {\n        chat.onTheir('my_peer', (url, k, from) => {\n          console.log('Got private peer url', url, 'from', from);\n          peers.addPeer({url, from})\n        });\n      }\n       */\n\n    });\n  },\n\n  // TODO: should perhaps be in Channel\n  processMessage(chatId: string, msg: any, info: any, onClickNotification?: Function) {\n    const chat = privateState(chatId);\n    chat.messageIds = chat.messageIds || {};\n    if (chat.messageIds[msg.time + info.from]) return;\n    chat.messageIds[msg.time + info.from] = true;\n    if (info) {\n      msg = Object.assign(msg, info);\n    }\n    if (msg.invite) {\n      const chatLink = `https://iris.to/?channelId=${msg.invite.group}&inviter=${chatId}`;\n      this.newChannel(msg.invite.group, chatLink);\n      return;\n    }\n    msg.selfAuthored = info.selfAuthored;\n    local().get('channels').get(chatId).get('msgs').get(msg.time + (msg.from && msg.from.slice(0, 10))).put(JSON.stringify(msg));\n    msg.timeObj = new Date(msg.time);\n    if (!info.selfAuthored && msg.timeObj > chat.myLastSeenTime) {\n      if (window.location.hash !== `#/chat/${  chatId}` || document.visibilityState !== 'visible') {\n        notifications.changeChatUnseenCount(chatId, 1);\n      } else if (ourActivity === 'active') {\n          chat.setMyMsgsLastSeenTime();\n        }\n    }\n    if (!info.selfAuthored && msg.time > chat.theirMsgsLastSeenTime) {\n      local().get('channels').get(chatId).get('theirMsgsLastSeenTime').put(msg.time);\n    }\n    if (!chat.latestTime || (msg.time > chat.latestTime)) {\n      local().get('channels').get(chatId).put({\n        latestTime: msg.time,\n        latest: {time: msg.time, text: msg.text, selfAuthored: info.selfAuthored}\n      });\n    }\n    // TODO: onclickNotification should do       route(`/chat/${  pub}`);\n    notifications.notifyMsg(msg, info, chatId, onClickNotification);\n  },\n\n  subscribeToMsgs(pub) {\n    const c = privateState(pub);\n    if (c.subscribed) { return; }\n    c.subscribed = true;\n    c.getMessages((msg, info) => {\n      this.processMessage(pub, msg, info);\n    });\n  },\n\n  /**\n   * Known private channels with other users\n   */\n  channelIds: new Set(),\n};\n","import util from \"./util\";\nimport Node from \"./db/Node\";\n\n// TODO config {peers: ['http://localhost:8768/gun'], file: 'State.electron', multicast:false, localStorage: false}\nconst electron = util.isElectron ? new Node('electron').get('state') : null;\n\nexport default electron;","import publicSpace from './global';\nimport util from './util';\n\n/**\n * Content-addressed storage\n */\nexport default {\n  /**\n   * Get a file identified by its hash\n   * @param hash\n   * @param callback\n   * @returns {Promise<unknown>}\n   */\n  get(hash: string, callback: Function) {\n    return new Promise((resolve, reject) => {\n      if (!hash) {\n        reject('No hash provided');\n      }\n      if (typeof hash !== 'string') {\n        reject('Hash must be a string');\n      }\n      publicSpace().get('#').get(hash).on((v: any, _k: string, _x: any, e: any) => {\n        if (v) {\n          e.off();\n          callback && callback(v);\n          resolve(v);\n        }\n      });\n    });\n  },\n\n  /**\n   * Store a file and return its hash\n   * @param value\n   * @returns {Promise<string>}\n   */\n  async put(value: any) {\n    const hash = await util.getHash(value);\n    publicSpace().get('#').get(hash).put(value);\n    return hash;\n  }\n}","// @ts-nocheck\n\n/*jshint unused: false */\n`use strict`;\nimport util from './util';\nimport Attribute from './Attribute';\nimport Key from './Key';\n\nconst errorMsg = `Invalid message:`;\n\nclass ValidationError extends Error {}\n\n/**\n* Signed message object. Your friends can index and relay your messages, while others can still verify that they were signed by you.\n*\n* Fields: signedData, signer (public key) and signature.\n*\n* signedData has an author, signer, type, time and optionally other fields.\n*\n* signature covers the utf8 string representation of signedData. Since messages are digitally signed, users only need to care about the message signer and not who relayed it or whose index it was found from.\n*\n* signer is the entity that verified its origin. In other words: message author and signer can be different entities, and only the signer needs to use Iris.\n*\n* For example, a crawler can import and sign other people's messages from Twitter. Only the users who trust the crawler will see the messages.\n*\n* Constructor: creates a message from the param obj.signedData that must contain at least the mandatory fields: author, type and time.\n* @param obj\n*\n*/\nclass SignedMessage {\n  signedData: any;\n  pubKey: any;\n  sig: any;\n\n  constructor(obj: any) {\n    this.signedData = obj.signedData;\n    this.pubKey = obj.pubKey;\n    if (obj.sig) {\n      if (typeof obj.sig !== `string`) {\n        throw new ValidationError(`SignedMessage signature must be a string`);\n      }\n      this.sig = obj.sig;\n      this.getHash();\n    }\n    this._validate();\n  }\n\n  getSignerKeyID() {\n    return this.pubKey; // hack until gun supports keyID lookups\n    //return util.getHash(this.pubKey);\n  }\n\n  _validate() {\n    if (!this.signedData) {throw new ValidationError(`${errorMsg} Missing signedData`);}\n    if (typeof this.signedData !== `object`) {throw new ValidationError(`${errorMsg} signedData must be an object`);}\n    const d = this.signedData;\n\n    if (!d.type) {throw new ValidationError(`${errorMsg} Missing type definition`);}\n    if (!d.author) {throw new ValidationError(`${errorMsg} Missing author`);}\n    if (typeof d.author !== `object`) {throw new ValidationError(`${errorMsg} Author must be object`);}\n    if (Array.isArray(d.author)) {throw new ValidationError(`${errorMsg} Author must not be an array`);}\n    if (Object.keys(d.author).length === 0) {throw new ValidationError(`${errorMsg} Author empty`);}\n    if (this.pubKey) {\n      this.signerKeyHash = this.getSignerKeyID();\n    }\n    for (const attr in d.author) {\n      const t = typeof d.author[attr];\n      if (t !== `string`) {\n        if (Array.isArray(d.author[attr])) {\n          for (let i = 0;i < d.author[attr].length;i++) {\n            if (typeof d.author[attr][i] !== `string`) {throw new ValidationError(`${errorMsg} Author attribute must be string, got ${attr}: [${d.author[attr][i]}]`);}\n            if (d.author[attr][i].length === 0) {\n              throw new ValidationError(`${errorMsg} author ${attr} in array[${i}] is empty`);\n            }\n          }\n        } else {\n          throw new ValidationError(`${errorMsg} Author attribute must be string or array, got ${attr}: ${d.author[attr]}`);\n        }\n      }\n      if (attr === `keyID`) {\n        if (t !== `string`) {throw new ValidationError(`${errorMsg} Author keyID must be string, got ${t}`);}\n        if (this.signerKeyHash && d.author[attr] !== this.signerKeyHash) {throw new ValidationError(`${errorMsg} If message has a keyID author, it must be signed by the same key`);}\n      }\n    }\n    if (d.recipient) {\n      if (typeof d.recipient !== `object`) {throw new ValidationError(`${errorMsg} Recipient must be object`);}\n      if (Array.isArray(d.recipient)) {throw new ValidationError(`${errorMsg} Recipient must not be an array`);}\n      if (Object.keys(d.recipient).length === 0) {throw new ValidationError(`${errorMsg} Recipient empty`);}\n      for (const attr in d.recipient) {\n        const t = typeof d.recipient[attr];\n        if (t !== `string`) {\n          if (Array.isArray(d.recipient[attr])) {\n            for (let i = 0;i < d.recipient[attr].length;i++) {\n              if (typeof d.recipient[attr][i] !== `string`) {throw new ValidationError(`${errorMsg} Recipient attribute must be string, got ${attr}: [${d.recipient[attr][i]}]`);}\n              if (d.recipient[attr][i].length === 0) {\n                throw new ValidationError(`${errorMsg} recipient ${attr} in array[${i}] is empty`);\n              }\n            }\n          } else {\n            throw new ValidationError(`${errorMsg} Recipient attribute must be string or array, got ${attr}: ${d.recipient[attr]}`);\n          }\n        }\n      }\n    }\n    if (!(d.time || d.timestamp)) {throw new ValidationError(`${errorMsg} Missing time field`);}\n\n    if (!Date.parse(d.time || d.timestamp)) {throw new ValidationError(`${errorMsg} Invalid time field`);}\n\n    return true;\n  }\n\n  /**\n  * @param {Object} key keypair to sign the message with\n  */\n  async sign(key) {\n    this.sig = await Key.sign(this.signedData, key);\n    this.pubKey = key.pub;\n    await this.getHash();\n    return true;\n  }\n\n  /**\n  * Create an iris message. SignedMessage time is automatically set. If signingKey is specified and author omitted, signingKey will be used as author.\n  * @param {Object} signedData message data object including author, recipient and other possible attributes\n  * @param {Object} signingKey optionally, you can set the key to sign the message with\n  * @returns {Promise<SignedMessage>}  message\n  */\n  static async create(signedData, signingKey) {\n    if (!signedData.author && signingKey) {\n      signedData.author = {keyID: Key.getId(signingKey)};\n    }\n    signedData.time = signedData.time || (new Date()).toISOString();\n    const m = new SignedMessage({signedData});\n    if (signingKey) {\n      await m.sign(signingKey);\n    }\n    return m;\n  }\n\n  getAuthor(index) {\n    for (const a of this.getAuthorIterable()) {\n      if (a.isUniqueType()) {\n        return index.getContacts(a);\n      }\n    }\n  }\n\n  getRecipient(index) {\n    if (!this.signedData.recipient) {\n      return undefined;\n    }\n    for (const a of this.getRecipientIterable()) {\n      if (a.isUniqueType()) {\n        return index.getContacts(a);\n      }\n    }\n  }\n\n  /**\n  * @returns {string} base64 sha256 hash of message\n  */\n  async getHash() {\n    if (this.sig && !this.hash) {\n      this.hash = await util.getHash(this.sig);\n    }\n    return this.hash;\n  }\n\n  getId() {\n    return this.getHash();\n  }\n\n  static async fromSig(obj) {\n    if (!obj.sig) {\n      throw new Error(`Missing signature in object:`, obj);\n    }\n    if (!obj.pubKey) {\n      throw new Error(`Missing pubKey in object:`);\n    }\n    //const signedData = await Key.verify(obj.sig, obj.pubKey); // disable sig verification while migrating to new gun :(\n    const signedData = JSON.parse(obj.sig.slice(4)).m;\n    const o = {signedData, sig: obj.sig, pubKey: obj.pubKey};\n    return new SignedMessage(o);\n  }\n\n  /**\n  * @return {boolean} true if message signature is valid. Otherwise throws ValidationError.\n  */\n  async verify() {\n    if (!this.pubKey) {\n      throw new ValidationError(`${errorMsg} SignedMessage has no .pubKey`);\n    }\n    if (!this.sig) {\n      throw new ValidationError(`${errorMsg} SignedMessage has no .sig`);\n    }\n    this.signedData = await Key.verify(this.sig, this.pubKey);\n    if (!this.signedData) {\n      throw new ValidationError(`${errorMsg} Invalid signature`);\n    }\n    if (this.hash) {\n      if (this.hash !== (await util.getHash(this.sig))) {\n        throw new ValidationError(`${errorMsg} Invalid message hash`);\n      }\n    } else {\n      this.getHash();\n    }\n    return true;\n  }\n\n  /**\n  * @returns {string}\n  */\n  serialize() {\n    return {sig: this.sig, pubKey: this.pubKey};\n  }\n\n  toString() {\n    return JSON.stringify(this.serialize());\n  }\n\n  /**\n  * @returns {Promise<SignedMessage>}\n  */\n  static async deserialize(s) {\n    return SignedMessage.fromSig(s);\n  }\n\n  static async fromString(s) {\n    return SignedMessage.fromSig(JSON.parse(s));\n  }\n}\n\nexport default SignedMessage;\n","/*eslint no-useless-escape: \"off\", camelcase: \"off\" */\n\nimport session from './session';\nimport peers from './peers';\nimport util from './util';\nimport local from './local';\nimport global from './global';\nimport publicState from './public';\nimport group from './group';\nimport electron from './electron';\nimport privateState from './private';\nimport staticState from './static';\nimport notifications from './notifications';\n\nimport SignedMessage from './SignedMessage';\nimport Channel from './Channel';\nimport Node from './db/Node';\nimport Key from './Key';\n\nexport default {\n  local,\n  global,\n  group,\n  public: publicState,\n  private: privateState,\n  static: staticState,\n  electron,\n  peers,\n  session,\n  util,\n  notifications,\n  SignedMessage,\n  Channel,\n  Node,\n  Key\n};"],"names":["_","throttle","func","limit","inThrottle","args","arguments","context","this","apply","setTimeout","debounce","inDebounce","clearTimeout","sample","arr","Math","floor","random","length","sampleSize","size","temp","index","shuffled","slice","i","min","defer","once","called","omit","obj","keys","newObj","Object","forEach","key","includes","defaults","undefined","pickBy","predicate","isEqual","a","b","Date","getTime","prototype","every","k","uniq","set","Set","Array","from","isNode","toString","call","global","process","e","myKey","userAgent","navigator","toLowerCase","isElectron","indexOf","animals","adjectives","gunOnceDefined","node","Promise","resolve","on","val","_k","_a","eve","off","getHash","str","format","_context","encoder","TextEncoder","data","encode","crypto","subtle","digest","hash","_this","arrayBufferToBase64","base64ToHex","capitalize","s","charAt","toUpperCase","generateName","raw","atob","result","hex","charCodeAt","buffer","binary","bytes","Uint8Array","len","byteLength","String","fromCharCode","window","btoa","getCaret","el","selectionStart","document","selection","focus","r","createRange","re","createTextRange","rc","duplicate","moveToBookmark","getBookmark","setEndPoint","text","getUrlParameter","sParam","sParams","sParameterName","sURLVariables","location","search","substring","split","decodeURIComponent","formatTime","date","t","toLocaleTimeString","timeStyle","formatDate","toLocaleString","dateStyle","getDaySeparatorText","dateStr","now","nowStr","toLocaleDateString","dayDifference","round","weekday","getProfileLink","pub","origin","encodeURIComponent","truncateString","createElement","type","cls","parent","setAttribute","appendChild","isMobile","check","vendor","test","substr","delay","Key","getActiveKey","datadir","keyfile","fs","existsSync","privKeyFile","f","readFileSync","fromString","generate","newKey","writeFileSync","chmodSync","Error","localStorage","getItem","setItem","getDefault","getActivePub","_context2","setActiveKey","save","util","JSON","stringify","getId","parse","_context5","ecdhSubtle","generateKey","name","namedCurve","then","_context3","exportKey","privateKey","priv","d","publicKey","x","y","sa","_context4","epriv","epub","dh","console","log","keyToJwk","jwk","kty","crv","ext","key_ops","sign","pair","cb","opt","_context6","importKey","sig","m","Buffer","verify","_context7","buf","secret","_pub","_pair","encrypt","_data","_cb","_opt","decrypt","ELECTRON_GUN_URL","DEFAULT_PEERS","wss://gun-rs.iris.to/gun","self","loc","host","is_localhost_but_not_dev","startsWith","hostname","endsWith","url","enabled","known","add","peer","visibility","session","getKey","encryptedUrl","encryptedUrlHash","publicState","user","get","put","lastSeen","toISOString","connect","remove","disconnect","peerFromGun","getSaved","p","reset","isMixedContent","peers","disable","protocol","connectToLocalElectron","max","maxConnectedPeers","_this2","push","checkGunPeerCount","init","setInterval","_this4","Actor","id","replace","c","_proto","handle","_message","postMessage","message","Message","fromObject","Get","Put","deserialize","dam","Hi","serialize","generateMsgId","globalState","nodeId","recipients","childKey","jsonStr","checksum","#",".","updatedNodes","inResponseTo","entries","children","myNodeId","childValue","value","updatedAt","newFromKv","peerId","Memory","config","QuickLRU","maxSize","_inheritsLoose","handlePut","handleGet","store","putMessage","mergeAndSave","nodeName","existing","_i2","_Object$entries2$_i","MyDexie","dbName","version","stores","nodes","table","Dexie","IndexedDB","putQueue","values","map","notStored","db","bulkPut","err","error","queue","getQueue","bulkGet","callback","open","stack","throttledPut","path","throttledGet","has","_this3","savePath","Websocket","router","ws","WebSocket","onopen","sendQueue","send","onmessage","event","onclose","onerror","readyState","OPEN","CONNECTING","Router","Map","storageAdapters","serverPeers","seenMessages","sendTo","topic","join","subscribers","subscribersByTopic","storageAdapter","subscriber","opts","DEFAULT_CONFIG","allowPublicSpace","enableStats","localOnly","Node","on_subscriptions","_loop2","once_subscriptions","map_subscriptions","_loop","root","webSocketPeers","getCurrentUser","currentUser","setCurrentUser","childData","doCallbacks","newNode","auth","isArray","addParentNodes","childName","pop","parentId","request","counter","myOpts","assign","retry","Infinity","UNIQUE_ID_VALIDATORS","email","bitcoin","bitcoin_address","ip","ipv6","gpg_fingerprint","gpg_keyid","google_oauth2","tel","phone","keyID","account","uuid","Attribute","guessTypeOf","getUuid","getUniqueIdValidators","isUniqueType","match","equals","uri","userSpace","local","DEFAULT_PERMISSIONS","read","write","admin","Channel","options","myGroupSecret","chatLink","useChatLink","participants","addParticipant","o","founder","getChatLinks","subscribe","putDirect","getMyGroupSecret","getMySecretUuid","onTheirDirect","theirSecretUuids","theirGroupSecrets","onTheir","hasAdmin","inviter","participantsChanged","saved","chatWith","channelId","sharedSecret","linkId","encrypted","sharedKey","encryptedChatRequest","channelRequestId","getTheirSecretUuid","getTheirGroupSecret","changeMyGroupSecret","mute","participant","block","secrets","ourSecretChannelIds","theirSecretChannelIds","mySecretUuid","mySecret","mySecretHash","getCurrentParticipants","getParticipants","getParticipantsCallbackId","getParticipantsCallbacks","getSecret","getOurSecretChannelId","getTheirSecretChannelId","getChannels","listenToChatLinks","keypair","_context9","getMyChatLinks","seen","handleChannel","ourSecretChannelId","_context8","encryptedChatId","chatId","_context10","_context11","getMessages","_context12","_this5","theirSecretChannelId","messageReceived","userState","_context13","selfAuthored","messages","_context14","decrypted","info","getLatestMsg","callbackIfLatest","msg","_this6","latest","time","onMy","setMyMsgsLastSeenTime","getMyMsgsLastSeenTime","_this7","myMsgsLastSeenTime","getTheirMsgsLastSeenTime","_this8","theirMsgsLastSeenTime","removeParticipant","permissions","_context21","_this9","directSubscriptions","_onTheirDirectFromUser","groupSubscriptions","_onTheirGroupFromUser","_context22","trim","_context23","putGroup","_context25","_context26","onGroup","onDirect","onMyGroup","onTheirGroup","onMyDirect","_context33","_context32","_this10","_context31","v","_context35","_context34","hasWritePermission","_context38","_this11","_context37","_context40","hasOwnProperty","_context39","_this12","subscription","_context42","theirSecretUuid","_b","_this13","_context41","_context44","_context43","_this14","setTyping","isTyping","timeout","setTypingTimeout","_this15","getTyping","typing","_this16","getTypingTimeouts","getSimpleLink","urlRoot","_opts","_context46","chatLinks","chatLinkSubscriptions","links","link","channels","formatChatLink","_this17","encPub","requestId","_context45","createChatLink","_context47","sharedKeyString","encryptedSharedKey","ownerSecret","ownerEncryptedSharedKey","setActivity","activity","irisActivityStatus","setActivityTimeout","update","status","timerUpdate","getActivity","pubKey","activityDate","isActive","lastActive","isOnline","enc","_context48","_context51","_context50","_context49","removeGroupChatLink","removePrivateChatLink","deleteChannel","_context52","deleteGroup","_context53","channel","blockedUsers","isBlocked","_v","cache","callbacks","groupName","groupNode","follows","requestAnimationFrame","isFollowing","reduce","sum","_cached_map","cached","cacheKey","myEvent","item","_cached_on","_cached_count","count","_cached_fn","fn","callbackId","myCallbacks","loginTime","unseenMsgsTotal","unseenNotificationCount","webPushSubscriptions","desktopNotificationsEnabled","Notification","permission","publicVapidKey","urlBase64ToUint8Array","base64String","base64","repeat","rawData","outputArray","_subscribe","reg","pushManager","userVisibleOnly","applicationServerKey","addWebPushSubscription","_subscribeToWebPush","serviceWorker","ready","getRegistration","active","getSubscription","sub","addWebPushSubscriptionsToChats","channelIds","privateState","_addWebPushSubscription","saveToGun","_getWebPushSubscriptions","getEpub","getNotificationText","_getNotificationText","notification","profile","action","changeUnseenNotificationCount","change","_sendIrisNotification","recipient","_sendWebPushNotification","subscriptions","title","body","payload","endpoint","fetch","method","headers","content-type","_ret","myName","latestChatLink","onlineTimeout","ourActivity","noFollows","noFollowers","searchIndex","initCalled","notifyMsg","onClick","shouldNotify","timeObj","visibilityState","notificationSetting","getMyName","participantProfiles","icon","silent","onclick","sendWebPushNotification","subscribeToIrisNotifications","notificationsSeenTime","notificationsShownTime","setNotificationsShownTime","alreadyHave","group","getPubKey","encryptedNotification","target","sendIrisNotification","changeChatUnseenCount","chat","chatNode","unseen","subscribeToWebPush","getWebPushSubscriptions","removeSubscription","electron","searchableItems","getExtendedFollowsCalled","DEFAULT_FOLLOW","DEFAULT_SETTINGS","openAtLogin","minimizeOnClose","enableWebtorrent","enablePublicPeerDiscovery","autoplayWebtorrent","localStorageKey","login","autologin","loginAsNewUser","clearIndexedDB","updateSearchIndex","taskQueue","shift","Fuse","includeScore","includeMatches","threshold","leading","saveSearchResult","followDistance","followerCount","followers","addFollow","follower","updateNoFollows","updateNoFollowers","removeFollow","getExtendedFollows","maxDepth","currentDepth","followedKey","getSearchIndex","setOurOnlineStatus","activeRoute","setActive","addEventListener","pathname","notifications","updateGroups","shouldRefresh","addChannel","settings","reload","l","autofollow","logOut","_reg$active","unsubscribe","clear","href","r1","indexedDB","deleteDatabase","r2","r1done","r2done","onsuccess","getMyChatLink","myPeerUrl","shareMyPeerUrl","myIp","newChannel","latestTime","theirMsgsLastSeenDate","processMessage","myLastSeenTime","online","theirLastActiveTime","isDarkMode","matchMedia","matches","photo","hue","color","inviteLinks","onClickNotification","messageIds","invite","subscribeToMsgs","subscribed","reject","publicSpace","_x","errorMsg","ValidationError","SignedMessage","signedData","_validate","getSignerKeyID","author","attr","signerKeyHash","timestamp","create","signingKey","getAuthor","getAuthorIterable","getContacts","getRecipient","getRecipientIterable","fromSig","public","private","static","staticState"],"mappings":"qgSACA,IAAMA,EAAI,CACRC,SAAU,SAACC,EAAgBC,GACzB,IAAIC,EACJ,OAAO,WACL,IAAMC,EAAOC,UACPC,EAAUC,KACXJ,IACHF,EAAKO,MAAMF,EAASF,GACpBD,GAAa,EACbM,YAAW,WAAA,OAAMN,GAAa,IAAOD,MAI3CQ,SAAU,SAACT,EAAgBC,GACzB,IAAIS,EACJ,OAAO,WACL,IAAMP,EAAOC,UACPC,EAAUC,KAChBK,aAAaD,GACbA,EAAaF,YAAW,WAAA,OAAMR,EAAKO,MAAMF,EAASF,KAAOF,KAG7DW,OAAQ,SAACC,GAAU,OAAKA,EAAIC,KAAKC,MAAMD,KAAKE,SAAWH,EAAII,UAC3DC,WAAY,SAACL,EAAYM,GAMvB,IALA,IAGIC,EACAC,EAJEC,EAAWT,EAAIU,MAAM,GACvBC,EAAIX,EAAII,OACRQ,EAAMD,EAAIL,EAGPK,KAAMC,GAEXL,EAAOE,EADPD,EAAQP,KAAKC,OAAOS,EAAI,GAAKV,KAAKE,WAElCM,EAASD,GAASC,EAASE,GAC3BF,EAASE,GAAKJ,EAEhB,OAAOE,EAASC,MAAME,IAExBC,MAAO,SAAC1B,GAAc,OAAKQ,WAAWR,EAAM,IAC5C2B,KAAM,SAAC3B,GACL,IAAI4B,GAAS,EACb,OAAO,WACDA,IAGJA,GAAS,EACT5B,EAAKO,MAAMD,KAAMF,cAGrByB,KAAM,SAACC,EAAUC,GACf,IAAMC,EAAS,GAMf,OALAC,OAAOF,KAAKD,GAAKI,SAAQ,SAAAC,GAClBJ,EAAKK,SAASD,KACjBH,EAAOG,GAAOL,EAAIK,OAGfH,GAETK,SAAU,SAACP,EAAUO,GAMnB,OALAJ,OAAOF,KAAKM,GAAUH,SAAQ,SAAAC,QACXG,IAAbR,EAAIK,KACNL,EAAIK,GAAOE,EAASF,OAGjBL,GAETS,OAAQ,SAACT,EAAUU,GACjB,IAAMR,EAAS,GAMf,OALAC,OAAOF,KAAKD,GAAKI,SAAQ,SAAAC,GACnBK,EAAUV,EAAIK,MAChBH,EAAOG,GAAOL,EAAIK,OAGfH,GAETS,QAAS,SAACC,EAAQC,GAChB,GAAID,IAAMC,EACR,OAAO,EAET,GAAID,aAAaE,MAAQD,aAAaC,KACpC,OAAOF,EAAEG,YAAcF,EAAEE,UAE3B,IAAKH,IAAMC,GAAmB,iBAAND,GAA+B,iBAANC,EAC/C,OAAOD,GAAMA,GAAKC,GAAMA,EAE1B,GAAID,EAAEI,YAAcH,EAAEG,UACpB,OAAO,EAET,IAAMf,EAAOE,OAAOF,KAAKW,GACzB,OAAIX,EAAKd,SAAWgB,OAAOF,KAAKY,GAAG1B,QAG5Bc,EAAKgB,OAAM,SAAAC,GAAC,OAAIlD,EAAE2C,QAAQC,EAAEM,GAAIL,EAAEK,QAE3CC,KAAM,SAACpC,GACL,IAAMqC,EAAM,IAAIC,IAAItC,GACpB,OAAOuC,MAAMC,KAAKH,KCzFlBI,GAAS,EACb,IACEA,uBAASrB,OAAOa,UAAUS,SAASC,KAAKC,OAAOC,SAC/C,MAAOC,IAET,ICPIC,EDOEC,GAAaP,GAAUQ,WAAaA,UAAUD,WAAaC,UAAUD,UAAUE,cAC/EC,EAAcH,GAAaA,EAAUI,QAAQ,eAAiB,EAoB9DC,EAAU,CACd,UACA,UACA,MACA,SACA,MACA,SACA,OACA,QACA,MACA,SACA,WACA,WACA,YACA,YACA,SACA,YACA,WACA,YACA,aACA,MACA,WACA,WACA,UACA,MACA,QACA,YACA,MACA,SACA,SACA,YACA,WACA,YACA,WACA,OACA,MACA,OACA,SACA,SACA,MACA,SACA,OACA,QACA,YACA,MACA,OACA,SACA,WACA,SACA,QACA,QACA,MACA,YACA,UACA,QACA,QACA,WACA,WACA,UACA,OACA,MACA,WACA,cACA,UACA,SACA,YACA,aACA,YACA,UACA,YACA,UACA,aACA,aACA,WACA,OACA,YACA,QACA,YACA,MACA,SACA,cACA,QACA,SACA,MACA,SACA,OACA,QACA,UACA,WACA,UACA,YACA,OACA,SACA,SACA,YACA,OACA,QACA,WACA,MACA,UACA,SACA,WACA,OACA,YACA,SACA,OACA,QACA,YACA,SACA,UACA,MACA,QACA,WACA,MACA,MACA,SACA,SACA,SACA,QACA,UACA,OACA,WACA,OACA,MACA,aACA,OACA,MACA,OACA,WACA,YACA,UACA,QACA,SACA,SACA,UACA,OACA,WACA,QACA,SACA,UACA,cACA,SACA,OACA,UACA,aACA,OACA,QACA,UACA,UACA,UACA,OACA,UACA,OACA,WACA,QACA,UACA,eACA,WACA,SACA,QACA,WACA,cACA,QACA,SACA,SACA,SACA,SACA,MACA,YACA,aACA,WACA,aACA,OACA,OACA,QACA,MACA,QACA,UACA,UACA,WACA,OACA,QACA,UACA,QACA,UACA,SACA,SACA,OACA,SACA,QACA,UACA,SACA,OACA,QACA,WACA,OACA,QACA,WACA,SACA,SACA,UACA,WACA,SACA,WACA,SACA,YACA,SACA,WACA,aACA,UACA,OACA,SACA,OACA,cACA,OACA,UACA,WACA,SACA,QACA,WACA,OACA,QACA,OACA,SACA,UACA,OACA,cACA,SACA,UACA,UACA,YACA,OACA,UACA,QACA,MACA,KACA,QACA,UACA,WACA,SACA,aACA,YACA,UACA,UACA,UACA,UACA,QACA,WACA,MACA,SACA,OACA,WACA,UACA,YACA,WACA,OACA,YACA,WACA,SACA,QACA,UACA,YACA,SACA,OACA,SACA,QACA,SACA,SACA,SACA,UACA,MACA,cACA,QACA,WACA,UACA,aACA,aACA,SACA,OACA,UACA,YACA,WACA,aACA,SACA,UACA,UACA,WACA,WACA,QACA,QACA,QACA,SACA,WACA,aACA,QACA,QACA,QACA,OACA,QACA,QACA,QACA,QACA,OACA,UACA,SACA,YACA,QACA,WACA,WACA,WACA,QACA,QACA,WACA,UACA,OACA,QACA,YACA,YACA,OACA,QACA,QACA,YACA,UACA,UACA,OACA,SACA,OACA,QACA,SACA,OACA,WACA,SACA,QACA,OACA,SACA,SACA,gBACA,QACA,SACA,QACA,OACA,UACA,UACA,SACA,OACA,UACA,SACA,QACA,UACA,YACA,UACA,aACA,WACA,OACA,YACA,SACA,aACA,OACA,OACA,UACA,MACA,QACA,SACA,MACA,SACA,UACA,MACA,SACA,SACA,QACA,WACA,QACA,QACA,MACA,QACA,QACA,MACA,WAGIC,EAAa,CACjB,UACA,MACA,WACA,MACA,QACA,WACA,QACA,OACA,UACA,QACA,SACA,OACA,UACA,UACA,YACA,SACA,OACA,QACA,QACA,OACA,OACA,UACA,SACA,SACA,QACA,SACA,OACA,OACA,SACA,UACA,SACA,QACA,UACA,OACA,QACA,MACA,QACA,SACA,QACA,SACA,MACA,QACA,SACA,UACA,SACA,OACA,OACA,OACA,SACA,MACA,SACA,QACA,UACA,SACA,SACA,QACA,WACA,OACA,UACA,QACA,QACA,OACA,OACA,OACA,SACA,MACA,QACA,QACA,QACA,OACA,QACA,QACA,WACA,QACA,MACA,QACA,QACA,OACA,WACA,QACA,SACA,YACA,QACA,QACA,UACA,SACA,QACA,OACA,UACA,UACA,OACA,QACA,UACA,QACA,QACA,WACA,aACA,SACA,SACA,OACA,YACA,aACA,YACA,aACA,SACA,YACA,QACA,QACA,OACA,SACA,QACA,OACA,QACA,QACA,SACA,SACA,QACA,YACA,QACA,UACA,aACA,QACA,SACA,SACA,OACA,MACA,MACA,QACA,SACA,UACA,UACA,QACA,QACA,YACA,SACA,QACA,QACA,YACA,QACA,QACA,WACA,SACA,OACA,QACA,SACA,SACA,SACA,QACA,SACA,OACA,MACA,SACA,SACA,QACA,UACA,UACA,WACA,UACA,QACA,MACA,aACA,QACA,YACA,YACA,WACA,SACA,QACA,YACA,WACA,UACA,YACA,YACA,YACA,QACA,cACA,UACA,OACA,SACA,UACA,UACA,aACA,WACA,WACA,WACA,SACA,OACA,MACA,UACA,SACA,aACA,UACA,UACA,YACA,aACA,UACA,YACA,QACA,WACA,UACA,OACA,QACA,WACA,cACA,QACA,WACA,QACA,UACA,QACA,SACA,UACA,YACA,SACA,QACA,OACA,WACA,WACA,cACA,cACA,aACA,aACA,aACA,QACA,SACA,aACA,cACA,YACA,eACA,UACA,YACA,OACA,WACA,YACA,OACA,WACA,QACA,SACA,WACA,OACA,QACA,UACA,UACA,YACA,QACA,SACA,OACA,SACA,SACA,QACA,WACA,UACA,WACA,QACA,WACA,QACA,UACA,WACA,aACA,aACA,aACA,YACA,QACA,YACA,UACA,OACA,QACA,OACA,MACA,MACA,QACA,OACA,QACA,YACA,QACA,QACA,SACA,YACA,OACA,QACA,WACA,UACA,QACA,QACA,WACA,MACA,SACA,YACA,OACA,OACA,UACA,OACA,MACA,MACA,SACA,YACA,MACA,OACA,OACA,QACA,QACA,WACA,OACA,SACA,OACA,QACA,aACA,gBACA,UACA,YACA,UACA,OACA,QACA,QACA,OACA,QACA,OACA,SACA,WACA,UACA,UACA,QACA,SACA,YACA,SACA,WACA,OACA,UACA,OACA,YACA,OACA,UACA,SACA,SACA,YACA,WACA,UACA,QACA,OACA,UACA,QACA,UACA,QACA,UACA,aACA,OACA,SACA,WACA,YACA,cACA,aACA,SACA,UACA,WACA,SACA,UACA,SACA,SACA,QACA,QACA,QACA,MACA,SACA,UACA,WACA,QACA,QACA,cACA,aACA,QACA,OACA,WACA,cACA,MACA,SACA,QACA,WACA,WACA,aACA,QACA,MACA,UACA,QACA,eACA,SACA,OACA,OACA,QACA,QACA,SACA,YACA,UACA,cACA,WACA,SACA,cACA,OACA,cACA,eACA,WACA,WACA,MACA,WACA,cACA,WACA,UACA,OACA,QACA,OACA,OACA,aACA,OACA,YACA,YACA,QACA,UACA,UACA,SACA,gBACA,WACA,SACA,UACA,SACA,WACA,OACA,OACA,aACA,OACA,WACA,YACA,WACA,WACA,MACA,QACA,UACA,MACA,aACA,SACA,WACA,UACA,WACA,aACA,QACA,OACA,SACA,QACA,SACA,QACA,WACA,SACA,SACA,YACA,WACA,QACA,UACA,WACA,YACA,QACA,OACA,YACA,WACA,YACA,QACA,OACA,SACA,WACA,SACA,QACA,QACA,SACA,UACA,eACA,SACA,QACA,MACA,SACA,QACA,UACA,cACA,SACA,UACA,UACA,aACA,YACA,WACA,QACA,WACA,UACA,UACA,SACA,SACA,aACA,UACA,aACA,aACA,UACA,UACA,MACA,QACA,YACA,cACA,SACA,YACA,WACA,YACA,WACA,WACA,SACA,UACA,OACA,OACA,MACA,aACA,OACA,QACA,WACA,aACA,OACA,QACA,QACA,QACA,UACA,SACA,UACA,WACA,QACA,WACA,OACA,OACA,SACA,WACA,UACA,QACA,UACA,QACA,aACA,WACA,QACA,QACA,cACA,OACA,UACA,UACA,OACA,WACA,UACA,QACA,YACA,QACA,UACA,SACA,OACA,WACA,OACA,YACA,QACA,WACA,WACA,QACA,QACA,UACA,SACA,MACA,YACA,WACA,YACA,OACA,QACA,cACA,MACA,UACA,QACA,OACA,WACA,eACA,QACA,OACA,OACA,QACA,UACA,SACA,YACA,gBACA,UACA,UACA,aACA,QACA,QACA,SACA,QACA,WACA,OACA,SACA,UACA,MACA,QACA,OACA,YACA,OACA,YACA,eACA,UACA,UACA,UACA,YACA,QACA,YACA,cACA,UACA,WACA,WACA,eACA,UACA,SACA,WACA,YACA,SACA,WACA,WACA,SACA,YACA,UACA,OACA,OACA,SACA,SACA,UACA,OACA,YACA,QACA,YACA,OACA,MACA,cACA,QACA,UACA,UACA,aACA,YACA,SACA,OACA,SACA,YACA,MACA,SACA,QACA,WACA,QACA,QACA,iBACA,SACA,aACA,gBACA,aACA,QACA,QACA,OACA,OACA,YACA,UACA,WACA,aACA,SACA,WACA,OACA,UACA,WACA,aACA,UACA,WACA,UACA,WACA,UACA,WACA,UACA,YACA,MACA,YACA,aACA,YACA,WACA,QACA,WACA,WACA,WACA,MACA,UACA,QACA,WACA,aACA,UACA,UACA,QACA,SACA,iBACA,YACA,YACA,aACA,YACA,OACA,SACA,WACA,SACA,cACA,cACA,OACA,SACA,WACA,UACA,SACA,aACA,UACA,cACA,gBACA,QACA,UACA,WACA,UACA,QACA,QACA,cACA,UACA,UACA,SACA,SACA,OACA,QACA,MACA,QACA,WACA,QACA,gBACA,UACA,aACA,aACA,SACA,WACA,WACA,WACA,QACA,aACA,UACA,OACA,QACA,aACA,QACA,WACA,OACA,WACA,YACA,QACA,aACA,UACA,YACA,SACA,YACA,SACA,SACA,UACA,aACA,eACA,YACA,QACA,WACA,WACA,OACA,WACA,SACA,aACA,YACA,WACA,MACA,gBACA,SACA,aACA,UACA,QACA,gBACA,SACA,WACA,aACA,SACA,WACA,SACA,OACA,WACA,WACA,aACA,WACA,eACA,YACA,UACA,WACA,WACA,aACA,YACA,UACA,OACA,WACA,SACA,QACA,QACA,aACA,QACA,SACA,QACA,YACA,OACA,WACA,SACA,SACA,WACA,SACA,UACA,OACA,WACA,WACA,QACA,SACA,QACA,aACA,YACA,eACA,WACA,cACA,YACA,SACA,eACA,gBACA,WACA,cACA,UACA,YACA,WACA,cACA,YACA,WACA,WACA,YACA,SACA,cACA,aACA,SACA,QACA,eACA,aACA,UACA,WACA,QACA,YACA,cACA,aACA,cACA,SACA,YACA,aACA,aACA,aACA,SACA,aACA,SACA,gBACA,QACA,WACA,aACA,QACA,aACA,kBACA,WACA,UACA,cACA,UACA,WACA,SACA,aACA,QACA,UACA,WACA,QACA,aACA,cACA,UACA,cACA,SACA,WACA,QACA,OACA,QACA,WACA,aACA,UACA,aACA,aACA,YACA,OACA,SACA,gBACA,UACA,aACA,cACA,SACA,SACA,cACA,OACA,UACA,OACA,aACA,QACA,OACA,QACA,SACA,SACA,UACA,SACA,UACA,QACA,SACA,WACA,QACA,YACA,SACA,WACA,SACA,UACA,cACA,WACA,UACA,YACA,WACA,QACA,WACA,OACA,eACA,YACA,cACA,cACA,aACA,WACA,cACA,OACA,QACA,WACA,SACA,WACA,iBACA,UACA,aACA,UACA,YACA,WACA,QACA,aACA,UACA,UACA,MACA,WACA,YACA,cACA,cACA,eACA,cACA,YACA,WACA,UACA,cACA,gBACA,OACA,WACA,UACA,WACA,aACA,aACA,UACA,YACA,aACA,QACA,UACA,WACA,QACA,eACA,OACA,UACA,SACA,cACA,cACA,WACA,QACA,UACA,WACA,QACA,UACA,UACA,SACA,UACA,WACA,UACA,SACA,WACA,YACA,OACA,WACA,SACA,aACA,cACA,YACA,OACA,UACA,QACA,QACA,YACA,SACA,QACA,UACA,MACA,aACA,YACA,UACA,QACA,SACA,aACA,SACA,UACA,YACA,WACA,iBACA,eACA,WACA,QACA,UACA,QACA,UACA,WACA,QACA,QACA,WACA,WACA,QACA,WACA,OACA,UACA,gBACA,UACA,UACA,aACA,UACA,SACA,cACA,gBACA,eACA,aACA,aACA,QACA,WACA,UACA,SACA,UACA,SACA,OACA,UACA,aACA,eACA,QACA,YACA,WACA,aACA,eACA,OACA,aACA,UACA,UACA,aACA,QACA,QACA,WACA,gBACA,WACA,QACA,eACA,WACA,aACA,UACA,aACA,YACA,UACA,SACA,cACA,UACA,WACA,UACA,YACA,UACA,SACA,UACA,UACA,WACA,cACA,WACA,gBACA,aACA,QACA,WACA,YACA,aACA,SACA,SACA,YACA,WACA,SACA,SACA,SACA,eACA,QACA,aACA,YACA,OACA,YACA,SACA,QACA,UACA,YACA,aACA,WACA,eACA,gBACA,SACA,aACA,QACA,WACA,SACA,gBACA,SACA,aACA,UACA,QACA,SACA,cACA,aACA,aACA,eACA,WACA,YACA,UACA,aACA,UACA,WACA,UACA,QACA,SACA,YACA,WACA,OACA,WACA,UACA,OACA,UACA,YACA,cACA,aACA,SACA,YACA,aACA,YACA,WACA,SACA,SACA,SACA,WACA,UACA,UACA,UACA,SACA,cACA,YACA,YACA,WACA,SACA,UACA,SACA,YACA,UACA,cACA,SACA,aACA,MACA,WACA,OACA,KACA,WACA,aACA,UACA,YACA,SACA,SACA,WACA,WACA,YACA,UACA,UACA,QACA,aACA,YACA,eACA,cACA,WACA,OACA,aACA,SACA,SACA,YACA,UACA,UACA,UACA,WACA,SACA,WACA,SACA,MACA,QACA,WACA,aACA,YACA,WACA,WACA,QACA,YACA,UACA,eACA,WACA,WACA,eACA,aACA,UACA,QACA,UACA,UACA,WACA,aACA,SACA,UACA,SACA,UACA,SACA,SACA,UACA,eACA,YACA,UACA,YACA,SACA,cACA,YACA,WACA,aACA,SACA,UACA,YACA,iBACA,QACA,SACA,WACA,cACA,QACA,OACA,WACA,cACA,aACA,aACA,aACA,YACA,QACA,aACA,QACA,SACA,YACA,OACA,UACA,WACA,SACA,YACA,QACA,UACA,OACA,YACA,YACA,WACA,OACA,SACA,UACA,UACA,WACA,YACA,aACA,WACA,cACA,SACA,OACA,cACA,OACA,WACA,UACA,OACA,OACA,MACA,SACA,QACA,OACA,eACA,YACA,OACA,QACA,WACA,QACA,UACA,YACA,SACA,SACA,WACA,SACA,QACA,QACA,SACA,WACA,UACA,OACA,OACA,OACA,WACA,OACA,UACA,QACA,SACA,YACA,WACA,WACA,YACA,SACA,QACA,QACA,aACA,QACA,QACA,SACA,SACA,QACA,SACA,YACA,WACA,SACA,UACA,OACA,YACA,UACA,MACA,SACA,YACA,MACA,QACA,OACA,SACA,SACA,QACA,QACA,OACA,MACA,QACA,WACA,QACA,QACA,QACA,WACA,WACA,SACA,WACA,QACA,WACA,QACA,UACA,QACA,OACA,OACA,OACA,cACA,UACA,OACA,SACA,QACA,QACA,MACA,OACA,OACA,QACA,aACA,MACA,SACA,WACA,SACA,WACA,UACA,SACA,SACA,QACA,QACA,WACA,QACA,OACA,QACA,MACA,UACA,SACA,QACA,MACA,QACA,UACA,QACA,QACA,SACA,UACA,UACA,SACA,OACA,OACA,OACA,MACA,SACA,QACA,SACA,QACA,OACA,UAC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"}